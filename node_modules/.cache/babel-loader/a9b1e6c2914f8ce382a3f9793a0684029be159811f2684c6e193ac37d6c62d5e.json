{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * @module botframework-streaming\n */\n/**\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nvar httpContentStream_1 = require(\"./httpContentStream\");\nvar subscribableStream_1 = require(\"./subscribableStream\");\nvar StreamingResponse = /** @class */function () {\n  function StreamingResponse() {\n    this.streams = [];\n  }\n  /**\n   * Creates a streaming response with the passed in method, path, and body.\n   *\n   * @param statusCode The HTTP verb to use for this request.\n   * @param body Optional body containing additional information.\n   * @returns A streaming response with the appropriate statuscode and passed in body.\n   */\n  StreamingResponse.create = function (statusCode, body) {\n    var response = new StreamingResponse();\n    response.statusCode = statusCode;\n    if (body) {\n      response.addStream(body);\n    }\n    return response;\n  };\n  /**\n   * Adds a new stream attachment to this streaming request.\n   *\n   * @param content The Http content to include in the new stream attachment.\n   */\n  StreamingResponse.prototype.addStream = function (content) {\n    this.streams.push(new httpContentStream_1.HttpContentStream(content));\n  };\n  /**\n   * Sets the contents of the body of this streaming response.\n   *\n   * @param body The JSON text to write to the body of the streaming response.\n   */\n  StreamingResponse.prototype.setBody = function (body) {\n    var stream = new subscribableStream_1.SubscribableStream();\n    stream.write(JSON.stringify(body), 'utf8');\n    this.addStream(new httpContentStream_1.HttpContent({\n      type: 'application/json; charset=utf-8',\n      contentLength: stream.length\n    }, stream));\n  };\n  return StreamingResponse;\n}();\nexports.StreamingResponse = StreamingResponse;","map":{"version":3,"mappings":";;;;;AAAA;;;AAGA;;;;AAIA;AACA;AAEA;EAAA;IAEW,YAAO,GAAwB,EAAE;EAyC5C;EAvCI;;;;;;;EAOcA,wBAAM,GAApB,UAAqBC,UAAkB,EAAEC,IAAkB;IACvD,IAAIC,QAAQ,GAAG,IAAIH,iBAAiB,EAAE;IACtCG,QAAQ,CAACF,UAAU,GAAGA,UAAU;IAChC,IAAIC,IAAI,EAAE;MACNC,QAAQ,CAACC,SAAS,CAACF,IAAI,CAAC;;IAG5B,OAAOC,QAAQ;EACnB,CAAC;EAED;;;;;EAKOH,qCAAS,GAAhB,UAAiBK,OAAoB;IACjC,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,IAAIC,qCAAiB,CAACH,OAAO,CAAC,CAAC;EACrD,CAAC;EAED;;;;;EAKOL,mCAAO,GAAd,UAAeE,IAAS;IACpB,IAAIO,MAAM,GAAG,IAAIC,uCAAkB,EAAE;IACrCD,MAAM,CAACE,KAAK,CAACC,IAAI,CAACC,SAAS,CAACX,IAAI,CAAC,EAAE,MAAM,CAAC;IAC1C,IAAI,CAACE,SAAS,CAAC,IAAII,+BAAW,CAAC;MAC3BM,IAAI,EAAE,iCAAiC;MACvCC,aAAa,EAAEN,MAAM,CAACO;KACzB,EAAEP,MAAM,CAAC,CAAC;EACf,CAAC;EACL,wBAAC;AAAD,CAAC,EA3CD;AAAaQ","names":["StreamingResponse","statusCode","body","response","addStream","content","streams","push","httpContentStream_1","stream","subscribableStream_1","write","JSON","stringify","type","contentLength","length","exports"],"sources":["C:\\Projects\\health-care-chatbot\\node_modules\\botframework-streaming\\src\\streamingResponse.ts"],"sourcesContent":["/**\r\n * @module botframework-streaming\r\n */\r\n/**\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nimport { HttpContent, HttpContentStream } from './httpContentStream';\r\nimport { SubscribableStream } from './subscribableStream';\r\n\r\nexport class StreamingResponse {\r\n    public statusCode: number;\r\n    public streams: HttpContentStream[] = [];\r\n\r\n    /**\r\n     * Creates a streaming response with the passed in method, path, and body.\r\n     *\r\n     * @param statusCode The HTTP verb to use for this request.\r\n     * @param body Optional body containing additional information.\r\n     * @returns A streaming response with the appropriate statuscode and passed in body.\r\n     */\r\n    public static create(statusCode: number, body?: HttpContent): StreamingResponse {\r\n        let response = new StreamingResponse();\r\n        response.statusCode = statusCode;\r\n        if (body) {\r\n            response.addStream(body);\r\n        }\r\n\r\n        return response;\r\n    }\r\n\r\n    /**\r\n     * Adds a new stream attachment to this streaming request.\r\n     *\r\n     * @param content The Http content to include in the new stream attachment.\r\n     */\r\n    public addStream(content: HttpContent): void {\r\n        this.streams.push(new HttpContentStream(content));\r\n    }\r\n\r\n    /**\r\n     * Sets the contents of the body of this streaming response.\r\n     *\r\n     * @param body The JSON text to write to the body of the streaming response.\r\n     */\r\n    public setBody(body: any): void {\r\n        let stream = new SubscribableStream();\r\n        stream.write(JSON.stringify(body), 'utf8');\r\n        this.addStream(new HttpContent({\r\n            type: 'application/json; charset=utf-8',\r\n            contentLength: stream.length\r\n        }, stream));\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}