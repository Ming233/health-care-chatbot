{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar ScalarObservable_1 = require('./ScalarObservable');\nvar EmptyObservable_1 = require('./EmptyObservable');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar ArrayLikeObservable = function (_super) {\n  __extends(ArrayLikeObservable, _super);\n  function ArrayLikeObservable(arrayLike, scheduler) {\n    _super.call(this);\n    this.arrayLike = arrayLike;\n    this.scheduler = scheduler;\n    if (!scheduler && arrayLike.length === 1) {\n      this._isScalar = true;\n      this.value = arrayLike[0];\n    }\n  }\n  ArrayLikeObservable.create = function (arrayLike, scheduler) {\n    var length = arrayLike.length;\n    if (length === 0) {\n      return new EmptyObservable_1.EmptyObservable();\n    } else if (length === 1) {\n      return new ScalarObservable_1.ScalarObservable(arrayLike[0], scheduler);\n    } else {\n      return new ArrayLikeObservable(arrayLike, scheduler);\n    }\n  };\n  ArrayLikeObservable.dispatch = function (state) {\n    var arrayLike = state.arrayLike,\n      index = state.index,\n      length = state.length,\n      subscriber = state.subscriber;\n    if (subscriber.closed) {\n      return;\n    }\n    if (index >= length) {\n      subscriber.complete();\n      return;\n    }\n    subscriber.next(arrayLike[index]);\n    state.index = index + 1;\n    this.schedule(state);\n  };\n  /** @deprecated internal use only */\n  ArrayLikeObservable.prototype._subscribe = function (subscriber) {\n    var index = 0;\n    var _a = this,\n      arrayLike = _a.arrayLike,\n      scheduler = _a.scheduler;\n    var length = arrayLike.length;\n    if (scheduler) {\n      return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\n        arrayLike: arrayLike,\n        index: index,\n        length: length,\n        subscriber: subscriber\n      });\n    } else {\n      for (var i = 0; i < length && !subscriber.closed; i++) {\n        subscriber.next(arrayLike[i]);\n      }\n      subscriber.complete();\n    }\n  };\n  return ArrayLikeObservable;\n}(Observable_1.Observable);\nexports.ArrayLikeObservable = ArrayLikeObservable;","map":{"version":3,"mappings":";;;;;;;;;AACA,2BAA2B,eAAe,CAAC;AAC3C,iCAAiC,oBAAoB,CAAC;AACtD,gCAAgC,mBAAmB,CAAC;AAIpD;;;;;AAKA;EAA4CA;EAmC1C,6BAAoBC,SAAuB,EAAUC,SAAsB;IACzEC,iBAAO;IADW,cAAS,GAATF,SAAS;IAAwB,cAAS,GAATC,SAAS;IAE5D,IAAI,CAACA,SAAS,IAAID,SAAS,CAACG,MAAM,KAAK,CAAC,EAAE;MACxC,IAAI,CAACC,SAAS,GAAG,IAAI;MACrB,IAAI,CAACC,KAAK,GAAGL,SAAS,CAAC,CAAC,CAAC;IAC3B;EACF;EAvCOM,0BAAM,GAAb,UAAiBN,SAAuB,EAAEC,SAAsB;IAC9D,IAAME,MAAM,GAAGH,SAAS,CAACG,MAAM;IAC/B,IAAIA,MAAM,KAAK,CAAC,EAAE;MAChB,OAAO,IAAII,iCAAe,EAAK;IACjC,CAAC,MAAM,IAAIJ,MAAM,KAAK,CAAC,EAAE;MACvB,OAAO,IAAIK,mCAAgB,CAASR,SAAS,CAAC,CAAC,CAAC,EAAEC,SAAS,CAAC;IAC9D,CAAC,MAAM;MACL,OAAO,IAAIK,mBAAmB,CAACN,SAAS,EAAEC,SAAS,CAAC;IACtD;EACF,CAAC;EAEMK,4BAAQ,GAAf,UAAgBG,KAAU;IAChB,+BAAS;MAAEC,mBAAK;MAAEP,qBAAM;MAAEQ,6BAAU;IAE5C,IAAIA,UAAU,CAACC,MAAM,EAAE;MACrB;IACF;IAEA,IAAIF,KAAK,IAAIP,MAAM,EAAE;MACnBQ,UAAU,CAACE,QAAQ,EAAE;MACrB;IACF;IAEAF,UAAU,CAACG,IAAI,CAACd,SAAS,CAACU,KAAK,CAAC,CAAC;IAEjCD,KAAK,CAACC,KAAK,GAAGA,KAAK,GAAG,CAAC;IAEhB,IAAK,CAACK,QAAQ,CAACN,KAAK,CAAC;EAC9B,CAAC;EAaD;EAAqCH,wCAAU,GAAV,UAAWK,UAAyB;IACvE,IAAID,KAAK,GAAG,CAAC;IACb,aAAqC;MAA7BV,wBAAS;MAAEC,wBAAS;IAC5B,IAAME,MAAM,GAAGH,SAAS,CAACG,MAAM;IAE/B,IAAIF,SAAS,EAAE;MACb,OAAOA,SAAS,CAACc,QAAQ,CAACT,mBAAmB,CAACU,QAAQ,EAAE,CAAC,EAAE;QACzDhB,oBAAS;QAAEU,YAAK;QAAEP,cAAM;QAAEQ;OAC3B,CAAC;IACJ,CAAC,MAAM;MACL,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGd,MAAM,IAAI,CAACQ,UAAU,CAACC,MAAM,EAAEK,CAAC,EAAE,EAAE;QACrDN,UAAU,CAACG,IAAI,CAACd,SAAS,CAACiB,CAAC,CAAC,CAAC;MAC/B;MACAN,UAAU,CAACE,QAAQ,EAAE;IACvB;EACF,CAAC;EACH,0BAAC;AAAD,CAAC,CA3D2CK,uBAAU;AAAzCC,2BAAmB,sBA2D/B","names":["__extends","arrayLike","scheduler","_super","length","_isScalar","value","ArrayLikeObservable","EmptyObservable_1","ScalarObservable_1","state","index","subscriber","closed","complete","next","schedule","dispatch","i","Observable_1","exports"],"sources":["C:\\Projects\\health-care-chatbot\\node_modules\\src\\observable\\ArrayLikeObservable.ts"],"sourcesContent":["import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayLikeObservable<T> extends Observable<T> {\n\n  static create<T>(arrayLike: ArrayLike<T>, scheduler?: IScheduler): Observable<T> {\n    const length = arrayLike.length;\n    if (length === 0) {\n      return new EmptyObservable<T>();\n    } else if (length === 1) {\n      return new ScalarObservable<T>(<any>arrayLike[0], scheduler);\n    } else {\n      return new ArrayLikeObservable(arrayLike, scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n    const { arrayLike, index, length, subscriber } = state;\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    if (index >= length) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(arrayLike[index]);\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  private value: any;\n\n  constructor(private arrayLike: ArrayLike<T>, private scheduler?: IScheduler) {\n    super();\n    if (!scheduler && arrayLike.length === 1) {\n      this._isScalar = true;\n      this.value = arrayLike[0];\n    }\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const { arrayLike, scheduler } = this;\n    const length = arrayLike.length;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\n        arrayLike, index, length, subscriber\n      });\n    } else {\n      for (let i = 0; i < length && !subscriber.closed; i++) {\n        subscriber.next(arrayLike[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}