{"ast":null,"code":"\"use strict\";\n\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n */\nvar Scheduler = function () {\n  function Scheduler(SchedulerAction, now) {\n    if (now === void 0) {\n      now = Scheduler.now;\n    }\n    this.SchedulerAction = SchedulerAction;\n    this.now = now;\n  }\n  /**\n   * Schedules a function, `work`, for execution. May happen at some point in\n   * the future, according to the `delay` parameter, if specified. May be passed\n   * some context object, `state`, which will be passed to the `work` function.\n   *\n   * The given arguments will be processed an stored as an Action object in a\n   * queue of actions.\n   *\n   * @param {function(state: ?T): ?Subscription} work A function representing a\n   * task, or some unit of work to be executed by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler itself.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @return {Subscription} A subscription in order to be able to unsubscribe\n   * the scheduled work.\n   */\n  Scheduler.prototype.schedule = function (work, delay, state) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n    return new this.SchedulerAction(this, work).schedule(state, delay);\n  };\n  Scheduler.now = Date.now ? Date.now : function () {\n    return +new Date();\n  };\n  return Scheduler;\n}();\nexports.Scheduler = Scheduler;","map":{"version":3,"mappings":";;AAOA;;;;;;;;;;;;;;;;AAgBA;EAIE,mBAAoBA,eAA8B,EACtCC,GAAiC;IAAjC,oBAAiC;MAAjCA,MAAoBC,SAAS,CAACD,GAAG;IAAA;IADzB,oBAAe,GAAfD,eAAe;IAEjC,IAAI,CAACC,GAAG,GAAGA,GAAG;EAChB;EAYA;;;;;;;;;;;;;;;;;EAiBOC,4BAAQ,GAAf,UAAmBC,IAA0C,EAAEC,KAAiB,EAAEC,KAAS;IAA5B,sBAAiB;MAAjBD,SAAiB;IAAA;IAC9E,OAAO,IAAI,IAAI,CAACJ,eAAe,CAAI,IAAI,EAAEG,IAAI,CAAC,CAACG,QAAQ,CAACD,KAAK,EAAED,KAAK,CAAC;EACvE,CAAC;EApCaF,aAAG,GAAiBK,IAAI,CAACN,GAAG,GAAGM,IAAI,CAACN,GAAG,GAAG;IAAM,QAAC,IAAIM,IAAI,EAAE;EAAX,CAAW;EAqC3E,gBAAC;AAAD,CAAC,EAvCD;AAAaC,iBAAS,YAuCrB","names":["SchedulerAction","now","Scheduler","work","delay","state","schedule","Date","exports"],"sources":["C:\\Projects\\health-care-chatbot\\node_modules\\src\\Scheduler.ts"],"sourcesContent":["import { Action } from './scheduler/Action';\nimport { Subscription } from './Subscription';\n\nexport interface IScheduler {\n  now(): number;\n  schedule<T>(work: (this: Action<T>, state?: T) => void, delay?: number, state?: T): Subscription;\n}\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n */\nexport class Scheduler implements IScheduler {\n\n  public static now: () => number = Date.now ? Date.now : () => +new Date();\n\n  constructor(private SchedulerAction: typeof Action,\n              now: () => number = Scheduler.now) {\n    this.now = now;\n  }\n\n  /**\n   * A getter method that returns a number representing the current time\n   * (at the time this function was called) according to the scheduler's own\n   * internal clock.\n   * @return {number} A number that represents the current time. May or may not\n   * have a relation to wall-clock time. May or may not refer to a time unit\n   * (e.g. milliseconds).\n   */\n  public now: () => number;\n\n  /**\n   * Schedules a function, `work`, for execution. May happen at some point in\n   * the future, according to the `delay` parameter, if specified. May be passed\n   * some context object, `state`, which will be passed to the `work` function.\n   *\n   * The given arguments will be processed an stored as an Action object in a\n   * queue of actions.\n   *\n   * @param {function(state: ?T): ?Subscription} work A function representing a\n   * task, or some unit of work to be executed by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler itself.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @return {Subscription} A subscription in order to be able to unsubscribe\n   * the scheduled work.\n   */\n  public schedule<T>(work: (this: Action<T>, state?: T) => void, delay: number = 0, state?: T): Subscription {\n    return new this.SchedulerAction<T>(this, work).schedule(state, delay);\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}