{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar subscribableStream_1 = require(\"../subscribableStream\");\n/**\n * Base class streaming payload disassembling.\n */\nvar PayloadDisassembler = /** @class */function () {\n  function PayloadDisassembler(sender, id) {\n    this.sender = sender;\n    this.id = id;\n  }\n  PayloadDisassembler.serialize = function (item) {\n    var stream = new subscribableStream_1.SubscribableStream();\n    stream.write(JSON.stringify(item));\n    stream.end();\n    return {\n      stream: stream,\n      streamLength: stream.length\n    };\n  };\n  PayloadDisassembler.prototype.disassemble = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, stream, streamLength;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, this.getStream()];\n          case 1:\n            _a = _b.sent(), stream = _a.stream, streamLength = _a.streamLength;\n            this.stream = stream;\n            this.streamLength = streamLength;\n            return [2 /*return*/, this.send()];\n        }\n      });\n    });\n  };\n  PayloadDisassembler.prototype.send = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var header;\n      return __generator(this, function (_a) {\n        header = {\n          payloadType: this.payloadType,\n          payloadLength: this.streamLength,\n          id: this.id,\n          end: true\n        };\n        this.sender.sendPayload(header, this.stream);\n        return [2 /*return*/];\n      });\n    });\n  };\n\n  return PayloadDisassembler;\n}();\nexports.PayloadDisassembler = PayloadDisassembler;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUA;AAGA;;;AAGA;EAOI,6BAAmBA,MAAqB,EAAEC,EAAU;IAChD,IAAI,CAACD,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,EAAE,GAAGA,EAAE;EAChB;EAEiBC,6BAAS,GAA1B,UAA8BC,IAAO;IACjC,IAAIC,MAAM,GAAuB,IAAIC,uCAAkB,EAAE;IAEzDD,MAAM,CAACE,KAAK,CAACC,IAAI,CAACC,SAAS,CAACL,IAAI,CAAC,CAAC;IAClCC,MAAM,CAACK,GAAG,EAAE;IAEZ,OAAO;MAACL,MAAM;MAAEM,YAAY,EAAEN,MAAM,CAACO;IAAM,CAAC;EAChD,CAAC;EAIYT,yCAAW,GAAxB;;;;;;YACmD,qBAAM,IAAI,CAACU,SAAS,EAAE;;YAAjEC,KAA2CC,SAAsB,EAA/DV,MAAM,cAAEM,YAAY;YAE1B,IAAI,CAACN,MAAM,GAAGA,MAAM;YACpB,IAAI,CAACM,YAAY,GAAGA,YAAY;YAEhC,sBAAO,IAAI,CAACK,IAAI,EAAE;QAAC;;;GACtB;EAEab,kCAAI,GAAlB;;;;QACQc,MAAM,GAAY;UAACC,WAAW,EAAE,IAAI,CAACA,WAAW;UAAEC,aAAa,EAAE,IAAI,CAACR,YAAY;UAAET,EAAE,EAAE,IAAI,CAACA,EAAE;UAAEQ,GAAG,EAAE;QAAI,CAAC;QAC/G,IAAI,CAACT,MAAM,CAACmB,WAAW,CAACH,MAAM,EAAE,IAAI,CAACZ,MAAM,CAAC;;;;GAC/C;;EACL,0BAAC;AAAD,CAAC,EApCD;AAAsBgB","names":["sender","id","PayloadDisassembler","item","stream","subscribableStream_1","write","JSON","stringify","end","streamLength","length","getStream","_a","_b","send","header","payloadType","payloadLength","sendPayload","exports"],"sources":["C:\\Projects\\health-care-chatbot\\node_modules\\botframework-streaming\\src\\disassemblers\\payloadDisassembler.ts"],"sourcesContent":["/**\r\n * @module botframework-streaming\r\n */\r\n/**\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nimport { IHeader } from '../interfaces/IHeader';\r\nimport { PayloadTypes } from '../payloads/payloadTypes';\r\nimport { PayloadSender } from '../payloadTransport/payloadSender';\r\nimport { SubscribableStream } from '../subscribableStream';\r\nimport { IStreamWrapper } from '../interfaces/IStreamWrapper';\r\n\r\n/**\r\n * Base class streaming payload disassembling.\r\n */\r\nexport abstract class PayloadDisassembler {\r\n    public abstract payloadType: PayloadTypes;\r\n    private readonly sender: PayloadSender;\r\n    private stream: SubscribableStream;\r\n    private streamLength?: number;\r\n    private readonly id: string;\r\n\r\n    public constructor(sender: PayloadSender, id: string) {\r\n        this.sender = sender;\r\n        this.id = id;\r\n    }\r\n\r\n    protected static serialize<T>(item: T): IStreamWrapper {\r\n        let stream: SubscribableStream = new SubscribableStream();\r\n\r\n        stream.write(JSON.stringify(item));\r\n        stream.end();\r\n\r\n        return {stream, streamLength: stream.length};\r\n    }\r\n\r\n    public abstract async getStream(): Promise<IStreamWrapper>;\r\n\r\n    public async disassemble(): Promise<void> {\r\n        let { stream, streamLength }: IStreamWrapper = await this.getStream();\r\n\r\n        this.stream = stream;\r\n        this.streamLength = streamLength;\r\n\r\n        return this.send();\r\n    }\r\n\r\n    private async send(): Promise<void> {\r\n        let header: IHeader = {payloadType: this.payloadType, payloadLength: this.streamLength, id: this.id, end: true};\r\n        this.sender.sendPayload(header, this.stream);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}