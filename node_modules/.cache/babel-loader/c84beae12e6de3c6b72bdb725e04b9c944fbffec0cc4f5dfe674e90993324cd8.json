{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar async_1 = require('../scheduler/async');\nvar isDate_1 = require('../util/isDate');\nvar Subscriber_1 = require('../Subscriber');\nvar Notification_1 = require('../Notification');\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nfunction delay(delay, scheduler) {\n  if (scheduler === void 0) {\n    scheduler = async_1.async;\n  }\n  var absoluteDelay = isDate_1.isDate(delay);\n  var delayFor = absoluteDelay ? +delay - scheduler.now() : Math.abs(delay);\n  return function (source) {\n    return source.lift(new DelayOperator(delayFor, scheduler));\n  };\n}\nexports.delay = delay;\nvar DelayOperator = function () {\n  function DelayOperator(delay, scheduler) {\n    this.delay = delay;\n    this.scheduler = scheduler;\n  }\n  DelayOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n  };\n  return DelayOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DelaySubscriber = function (_super) {\n  __extends(DelaySubscriber, _super);\n  function DelaySubscriber(destination, delay, scheduler) {\n    _super.call(this, destination);\n    this.delay = delay;\n    this.scheduler = scheduler;\n    this.queue = [];\n    this.active = false;\n    this.errored = false;\n  }\n  DelaySubscriber.dispatch = function (state) {\n    var source = state.source;\n    var queue = source.queue;\n    var scheduler = state.scheduler;\n    var destination = state.destination;\n    while (queue.length > 0 && queue[0].time - scheduler.now() <= 0) {\n      queue.shift().notification.observe(destination);\n    }\n    if (queue.length > 0) {\n      var delay_1 = Math.max(0, queue[0].time - scheduler.now());\n      this.schedule(state, delay_1);\n    } else {\n      source.active = false;\n    }\n  };\n  DelaySubscriber.prototype._schedule = function (scheduler) {\n    this.active = true;\n    this.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {\n      source: this,\n      destination: this.destination,\n      scheduler: scheduler\n    }));\n  };\n  DelaySubscriber.prototype.scheduleNotification = function (notification) {\n    if (this.errored === true) {\n      return;\n    }\n    var scheduler = this.scheduler;\n    var message = new DelayMessage(scheduler.now() + this.delay, notification);\n    this.queue.push(message);\n    if (this.active === false) {\n      this._schedule(scheduler);\n    }\n  };\n  DelaySubscriber.prototype._next = function (value) {\n    this.scheduleNotification(Notification_1.Notification.createNext(value));\n  };\n  DelaySubscriber.prototype._error = function (err) {\n    this.errored = true;\n    this.queue = [];\n    this.destination.error(err);\n  };\n  DelaySubscriber.prototype._complete = function () {\n    this.scheduleNotification(Notification_1.Notification.createComplete());\n  };\n  return DelaySubscriber;\n}(Subscriber_1.Subscriber);\nvar DelayMessage = function () {\n  function DelayMessage(time, notification) {\n    this.time = time;\n    this.notification = notification;\n  }\n  return DelayMessage;\n}();","map":{"version":3,"mappings":"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","names":["delay","scheduler","absoluteDelay","isDate_1","delayFor","now","Math","abs","source","lift","DelayOperator","exports","subscriber","subscribe","DelaySubscriber","__extends","destination","_super","state","queue","length","time","shift","notification","observe","delay_1","max","schedule","active","add","dispatch","errored","message","DelayMessage","push","_schedule","value","scheduleNotification","Notification_1","createNext","err","error","createComplete","Subscriber_1"],"sources":["C:\\Projects\\health-care-chatbot\\node_modules\\src\\operators\\delay.ts"],"sourcesContent":["import { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Action } from '../scheduler/Action';\nimport { Notification } from '../Notification';\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nexport function delay<T>(delay: number|Date,\n                         scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  const absoluteDelay = isDate(delay);\n  const delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(<number>delay);\n  return (source: Observable<T>) => source.lift(new DelayOperator(delayFor, scheduler));\n}\n\nclass DelayOperator<T> implements Operator<T, T> {\n  constructor(private delay: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n  }\n}\n\ninterface DelayState<T> {\n  source: DelaySubscriber<T>;\n  destination: PartialObserver<T>;\n  scheduler: IScheduler;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelaySubscriber<T> extends Subscriber<T> {\n  private queue: Array<DelayMessage<T>> = [];\n  private active: boolean = false;\n  private errored: boolean = false;\n\n  private static dispatch<T>(this: Action<DelayState<T>>, state: DelayState<T>): void {\n    const source = state.source;\n    const queue = source.queue;\n    const scheduler = state.scheduler;\n    const destination = state.destination;\n\n    while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n      queue.shift().notification.observe(destination);\n    }\n\n    if (queue.length > 0) {\n      const delay = Math.max(0, queue[0].time - scheduler.now());\n      this.schedule(state, delay);\n    } else {\n      source.active = false;\n    }\n  }\n\n  constructor(destination: Subscriber<T>,\n              private delay: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  private _schedule(scheduler: IScheduler): void {\n    this.active = true;\n    this.add(scheduler.schedule<DelayState<T>>(DelaySubscriber.dispatch, this.delay, {\n      source: this, destination: this.destination, scheduler: scheduler\n    }));\n  }\n\n  private scheduleNotification(notification: Notification<T>): void {\n    if (this.errored === true) {\n      return;\n    }\n\n    const scheduler = this.scheduler;\n    const message = new DelayMessage(scheduler.now() + this.delay, notification);\n    this.queue.push(message);\n\n    if (this.active === false) {\n      this._schedule(scheduler);\n    }\n  }\n\n  protected _next(value: T) {\n    this.scheduleNotification(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    this.errored = true;\n    this.queue = [];\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    this.scheduleNotification(Notification.createComplete());\n  }\n}\n\nclass DelayMessage<T> {\n  constructor(public readonly time: number,\n              public readonly notification: Notification<T>) {\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}