{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar ErrorObservable = function (_super) {\n  __extends(ErrorObservable, _super);\n  function ErrorObservable(error, scheduler) {\n    _super.call(this);\n    this.error = error;\n    this.scheduler = scheduler;\n  }\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits an error notification.\n   *\n   * <span class=\"informal\">Just emits 'error', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/throw.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the error notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then emit an error.</caption>\n   * var result = Rx.Observable.throw(new Error('oops!')).startWith(7);\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @example <caption>Map and flatten numbers to the sequence 'a', 'b', 'c', but throw an error for 13</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x === 13 ?\n   *     Rx.Observable.throw('Thirteens are bad') :\n   *     Rx.Observable.of('a', 'b', 'c')\n   * );\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link of}\n   *\n   * @param {any} error The particular Error to pass to the error notification.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emission of the error notification.\n   * @return {Observable} An error Observable: emits only the error notification\n   * using the given error argument.\n   * @static true\n   * @name throw\n   * @owner Observable\n   */\n  ErrorObservable.create = function (error, scheduler) {\n    return new ErrorObservable(error, scheduler);\n  };\n  ErrorObservable.dispatch = function (arg) {\n    var error = arg.error,\n      subscriber = arg.subscriber;\n    subscriber.error(error);\n  };\n  /** @deprecated internal use only */\n  ErrorObservable.prototype._subscribe = function (subscriber) {\n    var error = this.error;\n    var scheduler = this.scheduler;\n    subscriber.syncErrorThrowable = true;\n    if (scheduler) {\n      return scheduler.schedule(ErrorObservable.dispatch, 0, {\n        error: error,\n        subscriber: subscriber\n      });\n    } else {\n      subscriber.error(error);\n    }\n  };\n  return ErrorObservable;\n}(Observable_1.Observable);\nexports.ErrorObservable = ErrorObservable;","map":{"version":3,"mappings":";;;;;;;;;AACA,2BAA2B,eAAe,CAAC;AAS3C;;;;;AAKA;EAAqCA;EAmDnC,yBAAmBC,KAAU,EAAUC,SAAsB;IAC3DC,iBAAO;IADU,UAAK,GAALF,KAAK;IAAe,cAAS,GAATC,SAAS;EAEhD;EAnDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAwCOE,sBAAM,GAAb,UAAcH,KAAU,EAAEC,SAAsB;IAC9C,OAAO,IAAIE,eAAe,CAACH,KAAK,EAAEC,SAAS,CAAC;EAC9C,CAAC;EAEME,wBAAQ,GAAf,UAAgBC,GAAgB;IACtB,qBAAK;MAAEC,2BAAU;IACzBA,UAAU,CAACL,KAAK,CAACA,KAAK,CAAC;EACzB,CAAC;EAMD;EAAqCG,oCAAU,GAAV,UAAWE,UAA2B;IACzE,IAAML,KAAK,GAAG,IAAI,CAACA,KAAK;IACxB,IAAMC,SAAS,GAAG,IAAI,CAACA,SAAS;IAEhCI,UAAU,CAACC,kBAAkB,GAAG,IAAI;IAEpC,IAAIL,SAAS,EAAE;MACb,OAAOA,SAAS,CAACM,QAAQ,CAACJ,eAAe,CAACK,QAAQ,EAAE,CAAC,EAAE;QACrDR,YAAK;QAAEK;OACR,CAAC;IACJ,CAAC,MAAM;MACLA,UAAU,CAACL,KAAK,CAACA,KAAK,CAAC;IACzB;EACF,CAAC;EACH,sBAAC;AAAD,CAAC,CArEoCS,uBAAU;AAAlCC,uBAAe,kBAqE3B","names":["__extends","error","scheduler","_super","ErrorObservable","arg","subscriber","syncErrorThrowable","schedule","dispatch","Observable_1","exports"],"sources":["C:\\Projects\\health-care-chatbot\\node_modules\\src\\observable\\ErrorObservable.ts"],"sourcesContent":["import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\nexport interface DispatchArg {\n  error: any;\n  subscriber: any;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ErrorObservable extends Observable<any> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits an error notification.\n   *\n   * <span class=\"informal\">Just emits 'error', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/throw.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the error notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then emit an error.</caption>\n   * var result = Rx.Observable.throw(new Error('oops!')).startWith(7);\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @example <caption>Map and flatten numbers to the sequence 'a', 'b', 'c', but throw an error for 13</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x === 13 ?\n   *     Rx.Observable.throw('Thirteens are bad') :\n   *     Rx.Observable.of('a', 'b', 'c')\n   * );\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link of}\n   *\n   * @param {any} error The particular Error to pass to the error notification.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emission of the error notification.\n   * @return {Observable} An error Observable: emits only the error notification\n   * using the given error argument.\n   * @static true\n   * @name throw\n   * @owner Observable\n   */\n  static create(error: any, scheduler?: IScheduler): ErrorObservable {\n    return new ErrorObservable(error, scheduler);\n  }\n\n  static dispatch(arg: DispatchArg) {\n    const { error, subscriber } = arg;\n    subscriber.error(error);\n  }\n\n  constructor(public error: any, private scheduler?: IScheduler) {\n    super();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    const error = this.error;\n    const scheduler = this.scheduler;\n\n    subscriber.syncErrorThrowable = true;\n\n    if (scheduler) {\n      return scheduler.schedule(ErrorObservable.dispatch, 0, {\n        error, subscriber\n      });\n    } else {\n      subscriber.error(error);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}