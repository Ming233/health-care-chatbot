{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar Notification_1 = require('../Notification');\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nfunction observeOn(scheduler, delay) {\n  if (delay === void 0) {\n    delay = 0;\n  }\n  return function observeOnOperatorFunction(source) {\n    return source.lift(new ObserveOnOperator(scheduler, delay));\n  };\n}\nexports.observeOn = observeOn;\nvar ObserveOnOperator = function () {\n  function ObserveOnOperator(scheduler, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n    this.scheduler = scheduler;\n    this.delay = delay;\n  }\n  ObserveOnOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n  };\n  return ObserveOnOperator;\n}();\nexports.ObserveOnOperator = ObserveOnOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ObserveOnSubscriber = function (_super) {\n  __extends(ObserveOnSubscriber, _super);\n  function ObserveOnSubscriber(destination, scheduler, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n    _super.call(this, destination);\n    this.scheduler = scheduler;\n    this.delay = delay;\n  }\n  ObserveOnSubscriber.dispatch = function (arg) {\n    var notification = arg.notification,\n      destination = arg.destination;\n    notification.observe(destination);\n    this.unsubscribe();\n  };\n  ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {\n    this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));\n  };\n  ObserveOnSubscriber.prototype._next = function (value) {\n    this.scheduleMessage(Notification_1.Notification.createNext(value));\n  };\n  ObserveOnSubscriber.prototype._error = function (err) {\n    this.scheduleMessage(Notification_1.Notification.createError(err));\n  };\n  ObserveOnSubscriber.prototype._complete = function () {\n    this.scheduleMessage(Notification_1.Notification.createComplete());\n  };\n  return ObserveOnSubscriber;\n}(Subscriber_1.Subscriber);\nexports.ObserveOnSubscriber = ObserveOnSubscriber;\nvar ObserveOnMessage = function () {\n  function ObserveOnMessage(notification, destination) {\n    this.notification = notification;\n    this.destination = destination;\n  }\n  return ObserveOnMessage;\n}();\nexports.ObserveOnMessage = ObserveOnMessage;","map":{"version":3,"mappings":";;;;;;;;;AAIA,2BAA2B,eAAe,CAAC;AAC3C,6BAA6B,iBAAiB,CAAC;AAK/C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8CA,mBAA6BA,SAAqB,EAAEC,KAAiB;EAAjB,sBAAiB;IAAjBA,SAAiB;EAAA;EACnE,OAAO,mCAAmCC,MAAqB;IAC7D,OAAOA,MAAM,CAACC,IAAI,CAAC,IAAIC,iBAAiB,CAACJ,SAAS,EAAEC,KAAK,CAAC,CAAC;EAC7D,CAAC;AACH;AAJgBI,iBAAS,YAIxB;AAED;EACE,2BAAoBL,SAAqB,EAAUC,KAAiB;IAAzB,sBAAyB;MAAzBA,SAAyB;IAAA;IAAhD,cAAS,GAATD,SAAS;IAAsB,UAAK,GAALC,KAAK;EACxD;EAEAG,gCAAI,GAAJ,UAAKE,UAAyB,EAAEJ,MAAW;IACzC,OAAOA,MAAM,CAACK,SAAS,CAAC,IAAIC,mBAAmB,CAACF,UAAU,EAAE,IAAI,CAACN,SAAS,EAAE,IAAI,CAACC,KAAK,CAAC,CAAC;EAC1F,CAAC;EACH,wBAAC;AAAD,CAAC,EAPD;AAAaI,yBAAiB,oBAO7B;AAED;;;;;AAKA;EAA4CI;EAO1C,6BAAYC,WAA0B,EAClBV,SAAqB,EACrBC,KAAiB;IAAzB,sBAAyB;MAAzBA,SAAyB;IAAA;IACnCU,kBAAMD,WAAW,CAAC;IAFA,cAAS,GAATV,SAAS;IACT,UAAK,GAALC,KAAK;EAEzB;EAVOO,4BAAQ,GAAf,UAAgDI,GAAqB;IAC3D,mCAAY;MAAEF,6BAAW;IACjCG,YAAY,CAACC,OAAO,CAACJ,WAAW,CAAC;IACjC,IAAI,CAACK,WAAW,EAAE;EACpB,CAAC;EAQOP,6CAAe,GAAvB,UAAwBK,YAA+B;IACrD,IAAI,CAACG,GAAG,CAAC,IAAI,CAAChB,SAAS,CAACiB,QAAQ,CAC9BT,mBAAmB,CAACU,QAAQ,EAC5B,IAAI,CAACjB,KAAK,EACV,IAAIkB,gBAAgB,CAACN,YAAY,EAAE,IAAI,CAACH,WAAW,CAAC,CACrD,CAAC;EACJ,CAAC;EAESF,mCAAK,GAAf,UAAgBY,KAAQ;IACtB,IAAI,CAACC,eAAe,CAACC,2BAAY,CAACC,UAAU,CAACH,KAAK,CAAC,CAAC;EACtD,CAAC;EAESZ,oCAAM,GAAhB,UAAiBgB,GAAQ;IACvB,IAAI,CAACH,eAAe,CAACC,2BAAY,CAACG,WAAW,CAACD,GAAG,CAAC,CAAC;EACrD,CAAC;EAEShB,uCAAS,GAAnB;IACE,IAAI,CAACa,eAAe,CAACC,2BAAY,CAACI,cAAc,EAAE,CAAC;EACrD,CAAC;EACH,0BAAC;AAAD,CAAC,CAhC2CC,uBAAU;AAAzCtB,2BAAmB,sBAgC/B;AAED;EACE,0BAAmBQ,YAA+B,EAC/BH,WAAiC;IADjC,iBAAY,GAAZG,YAAY;IACZ,gBAAW,GAAXH,WAAW;EAC9B;EACF,uBAAC;AAAD,CAAC,EAJD;AAAaL,wBAAgB,mBAI5B","names":["scheduler","delay","source","lift","ObserveOnOperator","exports","subscriber","subscribe","ObserveOnSubscriber","__extends","destination","_super","arg","notification","observe","unsubscribe","add","schedule","dispatch","ObserveOnMessage","value","scheduleMessage","Notification_1","createNext","err","createError","createComplete","Subscriber_1"],"sources":["C:\\Projects\\health-care-chatbot\\node_modules\\src\\operators\\observeOn.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { TeardownLogic } from '../Subscription';\nimport { Action } from '../scheduler/Action';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn<T>(scheduler: IScheduler, delay: number = 0): MonoTypeOperatorFunction<T> {\n  return function observeOnOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new ObserveOnOperator(scheduler, delay));\n  };\n}\n\nexport class ObserveOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: IScheduler, private delay: number = 0) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ObserveOnSubscriber<T> extends Subscriber<T> {\n  static dispatch(this: Action<ObserveOnMessage>, arg: ObserveOnMessage) {\n    const { notification, destination } = arg;\n    notification.observe(destination);\n    this.unsubscribe();\n  }\n\n  constructor(destination: Subscriber<T>,\n              private scheduler: IScheduler,\n              private delay: number = 0) {\n    super(destination);\n  }\n\n  private scheduleMessage(notification: Notification<any>): void {\n    this.add(this.scheduler.schedule(\n      ObserveOnSubscriber.dispatch,\n      this.delay,\n      new ObserveOnMessage(notification, this.destination)\n    ));\n  }\n\n  protected _next(value: T): void {\n    this.scheduleMessage(Notification.createNext(value));\n  }\n\n  protected _error(err: any): void {\n    this.scheduleMessage(Notification.createError(err));\n  }\n\n  protected _complete(): void {\n    this.scheduleMessage(Notification.createComplete());\n  }\n}\n\nexport class ObserveOnMessage {\n  constructor(public notification: Notification<any>,\n              public destination: PartialObserver<any>) {\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}