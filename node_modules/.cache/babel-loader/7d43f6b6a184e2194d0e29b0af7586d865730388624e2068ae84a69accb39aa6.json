{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * A streaming pending request.\n */\nvar PendingRequest = /** @class */function () {\n  function PendingRequest() {}\n  return PendingRequest;\n}();\n/**\n * Orchestrates and manages pending streaming requests.\n */\nvar RequestManager = /** @class */function () {\n  function RequestManager() {\n    this._pendingRequests = {};\n  }\n  RequestManager.prototype.pendingRequestCount = function () {\n    return Object.keys(this._pendingRequests).length;\n  };\n  RequestManager.prototype.signalResponse = function (requestId, response) {\n    return __awaiter(this, void 0, void 0, function () {\n      var pendingRequest;\n      return __generator(this, function (_a) {\n        pendingRequest = this._pendingRequests[requestId];\n        if (pendingRequest) {\n          pendingRequest.resolve(response);\n          delete this._pendingRequests[requestId];\n          return [2 /*return*/, true];\n        }\n        return [2 /*return*/, false];\n      });\n    });\n  };\n  RequestManager.prototype.getResponse = function (requestId) {\n    var pendingRequest = this._pendingRequests[requestId];\n    if (pendingRequest) {\n      return Promise.reject(\"requestId '\" + requestId + \"' already exists in RequestManager\");\n    }\n    pendingRequest = new PendingRequest();\n    pendingRequest.requestId = requestId;\n    var promise = new Promise(function (resolve, reject) {\n      pendingRequest.resolve = resolve;\n      pendingRequest.reject = reject;\n    });\n    this._pendingRequests[requestId] = pendingRequest;\n    return promise;\n  };\n  return RequestManager;\n}();\nexports.RequestManager = RequestManager;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASA;;;AAGA;EAAA,2BAIA;EAAA,qBAAC;AAAD,CAAC,EAJD;AAMA;;;AAGA;EAAA;IACqB,qBAAgB,GAAG,EAAE;EAsC1C;EApCWA,4CAAmB,GAA1B;IACI,OAAOC,MAAM,CAACC,IAAI,CAAC,IAAI,CAACC,gBAAgB,CAAC,CAACC,MAAM;EACpD,CAAC;EAEYJ,uCAAc,GAA3B,UAA4BK,SAAiB,EAAEC,QAA0B;;;;QACjEC,cAAc,GAAG,IAAI,CAACJ,gBAAgB,CAACE,SAAS,CAAC;QAErD,IAAIE,cAAc,EAAE;UAChBA,cAAc,CAACC,OAAO,CAACF,QAAQ,CAAC;UAChC,OAAO,IAAI,CAACH,gBAAgB,CAACE,SAAS,CAAC;UAEvC,sBAAO,IAAI;;QAGf,sBAAO,KAAK;;;GACf;EAEML,oCAAW,GAAlB,UAAmBK,SAAiB;IAChC,IAAIE,cAAc,GAAG,IAAI,CAACJ,gBAAgB,CAACE,SAAS,CAAC;IAErD,IAAIE,cAAc,EAAE;MAChB,OAAOE,OAAO,CAACC,MAAM,CAAC,gBAAeL,SAAS,uCAAqC,CAAC;;IAGxFE,cAAc,GAAG,IAAII,cAAc,EAAE;IACrCJ,cAAc,CAACF,SAAS,GAAGA,SAAS;IAEpC,IAAIO,OAAO,GAAG,IAAIH,OAAO,CAAmB,UAACD,OAAO,EAAEE,MAAM;MACxDH,cAAc,CAACC,OAAO,GAAGA,OAAO;MAChCD,cAAc,CAACG,MAAM,GAAGA,MAAM;IAClC,CAAC,CAAC;IAEF,IAAI,CAACP,gBAAgB,CAACE,SAAS,CAAC,GAAGE,cAAc;IAEjD,OAAOK,OAAO;EAClB,CAAC;EACL,qBAAC;AAAD,CAAC,EAvCD;AAAaC","names":["RequestManager","Object","keys","_pendingRequests","length","requestId","response","pendingRequest","resolve","Promise","reject","PendingRequest","promise","exports"],"sources":["C:\\Projects\\health-care-chatbot\\node_modules\\botframework-streaming\\src\\payloads\\requestManager.ts"],"sourcesContent":["/**\r\n * @module botframework-streaming\r\n */\r\n/**\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nimport { IReceiveResponse } from '../interfaces/IReceiveResponse';\r\n\r\n/**\r\n * A streaming pending request.\r\n */\r\nclass PendingRequest {\r\n    public requestId: string;\r\n    public resolve: (response: IReceiveResponse) => void;\r\n    public reject: (reason?: any) => void;\r\n}\r\n\r\n/**\r\n * Orchestrates and manages pending streaming requests.\r\n */\r\nexport class RequestManager {\r\n    private readonly _pendingRequests = {};\r\n\r\n    public pendingRequestCount(): number {\r\n        return Object.keys(this._pendingRequests).length;\r\n    }\r\n\r\n    public async signalResponse(requestId: string, response: IReceiveResponse): Promise<boolean> {\r\n        let pendingRequest = this._pendingRequests[requestId];\r\n\r\n        if (pendingRequest) {\r\n            pendingRequest.resolve(response);\r\n            delete this._pendingRequests[requestId];\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public getResponse(requestId: string): Promise<IReceiveResponse> {\r\n        let pendingRequest = this._pendingRequests[requestId];\r\n\r\n        if (pendingRequest) {\r\n            return Promise.reject(`requestId '${ requestId }' already exists in RequestManager`);\r\n        }\r\n\r\n        pendingRequest = new PendingRequest();\r\n        pendingRequest.requestId = requestId;\r\n\r\n        let promise = new Promise<IReceiveResponse>((resolve, reject): void => {\r\n            pendingRequest.resolve = resolve;\r\n            pendingRequest.reject = reject;\r\n        });\r\n\r\n        this._pendingRequests[requestId] = pendingRequest;\r\n\r\n        return promise;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}