{"ast":null,"code":"\"use strict\";\n\n/**\n * @module botframework-streaming\n */\n/**\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar protocolAdapter_1 = require(\"../protocolAdapter\");\nvar payloads_1 = require(\"../payloads\");\nvar payloadTransport_1 = require(\"../payloadTransport\");\nvar browserWebSocket_1 = require(\"./browserWebSocket\");\nvar webSocketTransport_1 = require(\"./webSocketTransport\");\n/**\n * Web socket based client to be used as streaming transport.\n */\nvar WebSocketClient = /** @class */function () {\n  /**\n   * Creates a new instance of the [WebSocketClient](xref:botframework-streaming.WebSocketClient) class.\n   *\n   * @param url The URL of the remote server to connect to.\n   * @param requestHandler Optional [RequestHandler](xref:botframework-streaming.RequestHandler) to process incoming messages received by this server.\n   * @param disconnectionHandler Optional function to handle the disconnection message.\n   */\n  function WebSocketClient(_a) {\n    var url = _a.url,\n      requestHandler = _a.requestHandler,\n      _b = _a.disconnectionHandler,\n      disconnectionHandler = _b === void 0 ? null : _b;\n    this._url = url;\n    this._requestHandler = requestHandler;\n    this._disconnectionHandler = disconnectionHandler;\n    this._requestManager = new payloads_1.RequestManager();\n    this._sender = new payloadTransport_1.PayloadSender();\n    this._sender.disconnected = this.onConnectionDisconnected.bind(this);\n    this._receiver = new payloadTransport_1.PayloadReceiver();\n    this._receiver.disconnected = this.onConnectionDisconnected.bind(this);\n    this._protocolAdapter = new protocolAdapter_1.ProtocolAdapter(this._requestHandler, this._requestManager, this._sender, this._receiver);\n  }\n  /**\n   * Establish a connection with no custom headers.\n   *\n   * @returns A promise that will not resolve until the client stops listening for incoming messages.\n   */\n  WebSocketClient.prototype.connect = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var ws, transport;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            ws = new browserWebSocket_1.BrowserWebSocket();\n            return [4 /*yield*/, ws.connect(this._url)];\n          case 1:\n            _a.sent();\n            transport = new webSocketTransport_1.WebSocketTransport(ws);\n            this._sender.connect(transport);\n            this._receiver.connect(transport);\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Stop this client from listening.\n   */\n  WebSocketClient.prototype.disconnect = function () {\n    this._sender.disconnect(new payloadTransport_1.TransportDisconnectedEvent('Disconnect was called.'));\n    this._receiver.disconnect(new payloadTransport_1.TransportDisconnectedEvent('Disconnect was called.'));\n  };\n  /**\n   * Task used to send data over this client connection.\n   *\n   * @param request The streaming request to send.\n   * @returns A promise that will produce an instance of receive response on completion of the send operation.\n   */\n  WebSocketClient.prototype.send = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, this._protocolAdapter.sendRequest(request)];\n      });\n    });\n  };\n  WebSocketClient.prototype.onConnectionDisconnected = function (sender, args) {\n    if (this._disconnectionHandler != null) {\n      this._disconnectionHandler('Disconnected');\n      return;\n    }\n    throw new Error(\"Unable to re-connect client to transport for url \" + this._url + \". Sender: '\" + JSON.stringify(sender) + \"'. Args:' \" + JSON.stringify(args));\n  };\n  return WebSocketClient;\n}();\nexports.WebSocketClient = WebSocketClient;","map":{"version":3,"mappings":";;AAAA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;AAGA;AACA;AAKA;AACA;AAGA;;;AAGA;EASI;;;;;;;EAOA,yBAAmBA,EAAmD;QAAjDC,YAAG;MAAEC,kCAAc;MAAEC,4BAA2B;MAA3BC,gDAA2B;IACjE,IAAI,CAACC,IAAI,GAAGJ,GAAG;IACf,IAAI,CAACK,eAAe,GAAGJ,cAAc;IACrC,IAAI,CAACK,qBAAqB,GAAGH,oBAAoB;IAEjD,IAAI,CAACI,eAAe,GAAG,IAAIC,yBAAc,EAAE;IAE3C,IAAI,CAACC,OAAO,GAAG,IAAIC,gCAAa,EAAE;IAClC,IAAI,CAACD,OAAO,CAACE,YAAY,GAAG,IAAI,CAACC,wBAAwB,CAACC,IAAI,CAAC,IAAI,CAAC;IACpE,IAAI,CAACC,SAAS,GAAG,IAAIJ,kCAAe,EAAE;IACtC,IAAI,CAACI,SAAS,CAACH,YAAY,GAAG,IAAI,CAACC,wBAAwB,CAACC,IAAI,CAAC,IAAI,CAAC;IAEtE,IAAI,CAACE,gBAAgB,GAAG,IAAIC,iCAAe,CAAC,IAAI,CAACX,eAAe,EAAE,IAAI,CAACE,eAAe,EAAE,IAAI,CAACE,OAAO,EAAE,IAAI,CAACK,SAAS,CAAC;EACzH;EAEA;;;;;EAKaG,iCAAO,GAApB;;;;;;YACUC,EAAE,GAAG,IAAIC,mCAAgB,EAAE;YACjC,qBAAMD,EAAE,CAACE,OAAO,CAAC,IAAI,CAAChB,IAAI,CAAC;;YAA3BL,SAA2B;YACrBsB,SAAS,GAAG,IAAIC,uCAAkB,CAACJ,EAAE,CAAC;YAC5C,IAAI,CAACT,OAAO,CAACW,OAAO,CAACC,SAAS,CAAC;YAC/B,IAAI,CAACP,SAAS,CAACM,OAAO,CAACC,SAAS,CAAC;;;;;GACpC;EAED;;;EAGOJ,oCAAU,GAAjB;IACI,IAAI,CAACR,OAAO,CAACc,UAAU,CAAC,IAAIb,6CAA0B,CAAC,wBAAwB,CAAC,CAAC;IACjF,IAAI,CAACI,SAAS,CAACS,UAAU,CAAC,IAAIb,6CAA0B,CAAC,wBAAwB,CAAC,CAAC;EACvF,CAAC;EAED;;;;;;EAMaO,8BAAI,GAAjB,UAAkBO,OAAyB;;;QACvC,sBAAO,IAAI,CAACT,gBAAgB,CAACU,WAAW,CAACD,OAAO,CAAC;;;GACpD;EAEOP,kDAAwB,GAAhC,UAAiCS,MAAc,EAAEC,IAAS;IACtD,IAAI,IAAI,CAACrB,qBAAqB,IAAI,IAAI,EAAE;MACpC,IAAI,CAACA,qBAAqB,CAAC,cAAc,CAAC;MAC1C;;IAGJ,MAAM,IAAIsB,KAAK,CAAC,sDAAqD,IAAI,CAACxB,IAAI,mBAAgByB,IAAI,CAACC,SAAS,CAACJ,MAAM,CAAC,kBAAeG,IAAI,CAACC,SAAS,CAACH,IAAI,CAAI,CAAC;EAC/J,CAAC;EACL,sBAAC;AAAD,CAAC,EAtED;AAAaI","names":["_a","url","requestHandler","_b","disconnectionHandler","_url","_requestHandler","_disconnectionHandler","_requestManager","payloads_1","_sender","payloadTransport_1","disconnected","onConnectionDisconnected","bind","_receiver","_protocolAdapter","protocolAdapter_1","WebSocketClient","ws","browserWebSocket_1","connect","transport","webSocketTransport_1","disconnect","request","sendRequest","sender","args","Error","JSON","stringify","exports"],"sources":["C:\\Projects\\health-care-chatbot\\node_modules\\botframework-streaming\\src\\webSocket\\browserWebSocketClient.ts"],"sourcesContent":["/**\n * @module botframework-streaming\n */\n/**\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ProtocolAdapter } from '../protocolAdapter';\nimport { RequestHandler } from '../requestHandler';\nimport { StreamingRequest } from '../streamingRequest';\nimport { RequestManager } from '../payloads';\nimport {\n    PayloadReceiver,\n    PayloadSender,\n    TransportDisconnectedEvent\n} from '../payloadTransport';\nimport { BrowserWebSocket } from './browserWebSocket';\nimport { WebSocketTransport } from './webSocketTransport';\nimport { IStreamingTransportClient, IReceiveResponse } from '../interfaces';\n\n/**\n * Web socket based client to be used as streaming transport.\n */\nexport class WebSocketClient implements IStreamingTransportClient {\n    private readonly _url: string;\n    private readonly _requestHandler: RequestHandler;\n    private readonly _sender: PayloadSender;\n    private readonly _receiver: PayloadReceiver;\n    private readonly _requestManager: RequestManager;\n    private readonly _protocolAdapter: ProtocolAdapter;\n    private readonly _disconnectionHandler: (message: string) => void;\n\n    /**\n     * Creates a new instance of the [WebSocketClient](xref:botframework-streaming.WebSocketClient) class.\n     *\n     * @param url The URL of the remote server to connect to.\n     * @param requestHandler Optional [RequestHandler](xref:botframework-streaming.RequestHandler) to process incoming messages received by this server.\n     * @param disconnectionHandler Optional function to handle the disconnection message.\n     */\n    public constructor({ url, requestHandler, disconnectionHandler = null}) {\n        this._url = url;\n        this._requestHandler = requestHandler;\n        this._disconnectionHandler = disconnectionHandler;\n\n        this._requestManager = new RequestManager();\n\n        this._sender = new PayloadSender();\n        this._sender.disconnected = this.onConnectionDisconnected.bind(this);\n        this._receiver = new PayloadReceiver();\n        this._receiver.disconnected = this.onConnectionDisconnected.bind(this);\n\n        this._protocolAdapter = new ProtocolAdapter(this._requestHandler, this._requestManager, this._sender, this._receiver);\n    }\n\n    /**\n     * Establish a connection with no custom headers.\n     *\n     * @returns A promise that will not resolve until the client stops listening for incoming messages.\n     */\n    public async connect(): Promise<void> {\n        const ws = new BrowserWebSocket();\n        await ws.connect(this._url);\n        const transport = new WebSocketTransport(ws);\n        this._sender.connect(transport);\n        this._receiver.connect(transport);\n    }\n\n    /**\n     * Stop this client from listening.\n     */\n    public disconnect(): void {\n        this._sender.disconnect(new TransportDisconnectedEvent('Disconnect was called.'));\n        this._receiver.disconnect(new TransportDisconnectedEvent('Disconnect was called.'));\n    }\n\n    /**\n     * Task used to send data over this client connection.\n     *\n     * @param request The streaming request to send.\n     * @returns A promise that will produce an instance of receive response on completion of the send operation.\n     */\n    public async send(request: StreamingRequest): Promise<IReceiveResponse> {\n        return this._protocolAdapter.sendRequest(request);\n    }\n\n    private onConnectionDisconnected(sender: object, args: any): void {\n        if (this._disconnectionHandler != null) {\n            this._disconnectionHandler('Disconnected');\n            return;\n        }\n\n        throw new Error(`Unable to re-connect client to transport for url ${ this._url }. Sender: '${ JSON.stringify(sender) }'. Args:' ${ JSON.stringify(args) }`);\n    }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}