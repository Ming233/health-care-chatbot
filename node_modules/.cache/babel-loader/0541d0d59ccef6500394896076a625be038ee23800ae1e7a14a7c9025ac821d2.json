{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\health-care-chatbot\\\\src\\\\app\\\\main.jsx\",\n  _s = $RefreshSig$();\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { Chat, HeroCard } from '@progress/kendo-react-conversational-ui';\nimport { Calendar } from '@progress/kendo-react-dateinputs';\nimport { DirectLine } from 'botframework-directlinejs';\nimport AdaptiveCards from \"adaptivecards\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst client = new DirectLine({\n  secret: \"yFLWlpeK3CI.cwA.r18.M9VxoEcUnMthu5zsWX2Ox95r5YCcvbC_GvPJooRM0sQ\"\n});\nconst user = {\n  id: \"1\",\n  name: 'Ming'\n};\nconst bot = {\n  id: \"0\",\n  name: 'HealthCare Bot',\n  avatarUrl: \"https://demos.telerik.com/kendo-ui/content/chat/HealthCareBot.png\"\n};\nconst App = () => {\n  _s();\n  const [messages, setMessages] = React.useState([]);\n  React.useEffect(() => {\n    client.activity$.subscribe(activity => onResponse(activity));\n  }, []);\n  const аttachmentTemplate = props => {\n    let attachment = props.item;\n    if (attachment.contentType === \"application/vnd.microsoft.card.hero\") {\n      return /*#__PURE__*/_jsxDEV(HeroCard, {\n        title: attachment.content.title || attachment.content.text,\n        imageUrl: attachment.content.images ? attachment.content.images[0].url : \"\",\n        subtitle: attachment.content.subtitle ? attachment.content.subtitle : \"HealthCareBotService\",\n        actions: attachment.content.buttons,\n        onActionExecute: addNewMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 14\n      }, this);\n    } else if (attachment.type === \"calendar\") {\n      return /*#__PURE__*/_jsxDEV(Calendar, {\n        onChange: event => {\n          addNewMessage(event);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 14\n      }, this);\n    } else {\n      let adaptiveCard = new AdaptiveCards.AdaptiveCard();\n      adaptiveCard.parse(attachment.content);\n      let renderedCard = adaptiveCard.render();\n      let htmlToinsert = {\n        __html: renderedCard.innerHTML\n      };\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        dangerouslySetInnerHTML: htmlToinsert\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 14\n      }, this);\n    }\n  };\n  const parseActions = actions => {\n    if (actions !== undefined) {\n      actions.actions.map(action => {\n        if (action.type === 'imBack') {\n          action.type = 'reply';\n        }\n      });\n      return actions.actions;\n    }\n    return [];\n  };\n  const parseText = event => {\n    if (event.action !== undefined) {\n      return event.action.value;\n    } else if (event.value) {\n      return event.value;\n    } else {\n      return event.message.text;\n    }\n  };\n  const onResponse = activity => {\n    let newMessage;\n    let dateRe = /date/i;\n    if (activity.from.id === \"HealthCareBotService\") {\n      newMessage = {\n        text: activity.text,\n        author: bot,\n        typing: activity.type === \"typing\" ? true : false,\n        timestamp: new Date(activity.timestamp),\n        suggestedActions: parseActions(activity.suggestedActions),\n        attachments: activity.attachments ? activity.attachments : []\n      };\n      setMessages(oldMessages => [...oldMessages, newMessage]);\n    }\n    if (dateRe.test(activity.text)) {\n      let newAttachments = [{\n        type: \"calendar\"\n      }];\n      setMessages([...messages, {\n        author: bot,\n        timestamp: new Date(activity.timestamp),\n        attachments: newAttachments\n      }]);\n    }\n  };\n  const addNewMessage = event => {\n    let value = parseText(event);\n    client.postActivity({\n      from: {\n        id: user.id,\n        name: user.name\n      },\n      type: 'message',\n      text: value\n    }).subscribe(id => console.log(\"Posted activity, assigned ID \", id), error => console.log(\"Error posting activity\", error));\n    if (!event.value) {\n      setMessages(oldMessages => [...oldMessages, {\n        author: user,\n        text: value,\n        timestamp: new Date()\n      }]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Chat, {\n    messages: messages,\n    user: user,\n    onMessageSend: addNewMessage,\n    attachmentTemplate: аttachmentTemplate\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 10\n  }, this);\n};\n_s(App, \"RyA59LRbn9goj/9N7rELX+NWNVI=\");\n_c = App;\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 107,\n  columnNumber: 17\n}, this), document.querySelector('my-app'));\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","ReactDOM","Chat","HeroCard","Calendar","DirectLine","AdaptiveCards","client","secret","user","id","name","bot","avatarUrl","App","messages","setMessages","useState","useEffect","activity$","subscribe","activity","onResponse","аttachmentTemplate","props","attachment","item","contentType","content","title","text","images","url","subtitle","buttons","addNewMessage","type","event","adaptiveCard","AdaptiveCard","parse","renderedCard","render","htmlToinsert","__html","innerHTML","parseActions","actions","undefined","map","action","parseText","value","message","newMessage","dateRe","from","author","typing","timestamp","Date","suggestedActions","attachments","oldMessages","test","newAttachments","postActivity","console","log","error","document","querySelector"],"sources":["C:/Projects/health-care-chatbot/src/app/main.jsx"],"sourcesContent":["import * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport { Chat, HeroCard } from '@progress/kendo-react-conversational-ui';\r\nimport { Calendar } from '@progress/kendo-react-dateinputs';\r\nimport { DirectLine } from 'botframework-directlinejs';\r\nimport AdaptiveCards from \"adaptivecards\";\r\nconst client = new DirectLine({\r\n  secret: \"yFLWlpeK3CI.cwA.r18.M9VxoEcUnMthu5zsWX2Ox95r5YCcvbC_GvPJooRM0sQ\"\r\n});\r\nconst user = {\r\n  id: \"1\",\r\n  name: 'Ming'\r\n};\r\nconst bot = {\r\n  id: \"0\",\r\n  name: 'HealthCare Bot',\r\n  avatarUrl: \"https://demos.telerik.com/kendo-ui/content/chat/HealthCareBot.png\"\r\n};\r\nconst App = () => {\r\n  const [messages, setMessages] = React.useState([]);\r\n  React.useEffect(() => {\r\n    client.activity$.subscribe(activity => onResponse(activity));\r\n  }, []);\r\n  const аttachmentTemplate = props => {\r\n    let attachment = props.item;\r\n    if (attachment.contentType === \"application/vnd.microsoft.card.hero\") {\r\n      return <HeroCard title={attachment.content.title || attachment.content.text} imageUrl={attachment.content.images ? attachment.content.images[0].url : \"\"} subtitle={attachment.content.subtitle ? attachment.content.subtitle : \"HealthCareBotService\"} actions={attachment.content.buttons} onActionExecute={addNewMessage} />;\r\n    } else if (attachment.type === \"calendar\") {\r\n      return <Calendar onChange={event => {\r\n        addNewMessage(event);\r\n      }} />;\r\n    } else {\r\n      let adaptiveCard = new AdaptiveCards.AdaptiveCard();\r\n      adaptiveCard.parse(attachment.content);\r\n      let renderedCard = adaptiveCard.render();\r\n      let htmlToinsert = {\r\n        __html: renderedCard.innerHTML\r\n      };\r\n      return <div dangerouslySetInnerHTML={htmlToinsert} />;\r\n    }\r\n  };\r\n  const parseActions = actions => {\r\n    if (actions !== undefined) {\r\n      actions.actions.map(action => {\r\n        if (action.type === 'imBack') {\r\n          action.type = 'reply';\r\n        }\r\n      });\r\n      return actions.actions;\r\n    }\r\n    return [];\r\n  };\r\n  const parseText = event => {\r\n    if (event.action !== undefined) {\r\n      return event.action.value;\r\n    } else if (event.value) {\r\n      return event.value;\r\n    } else {\r\n      return event.message.text;\r\n    }\r\n  };\r\n  const onResponse = activity => {\r\n    let newMessage;\r\n    let dateRe = /date/i;\r\n    if (activity.from.id === \"HealthCareBotService\") {\r\n      newMessage = {\r\n        text: activity.text,\r\n        author: bot,\r\n        typing: activity.type === \"typing\" ? true : false,\r\n        timestamp: new Date(activity.timestamp),\r\n        suggestedActions: parseActions(activity.suggestedActions),\r\n        attachments: activity.attachments ? activity.attachments : []\r\n      };\r\n      setMessages(oldMessages => [...oldMessages, newMessage]);\r\n    }\r\n    if (dateRe.test(activity.text)) {\r\n      let newAttachments = [{\r\n        type: \"calendar\"\r\n      }];\r\n      setMessages([...messages, {\r\n        author: bot,\r\n        timestamp: new Date(activity.timestamp),\r\n        attachments: newAttachments\r\n      }]);\r\n    }\r\n  };\r\n  const addNewMessage = event => {\r\n    let value = parseText(event);\r\n    client.postActivity({\r\n      from: {\r\n        id: user.id,\r\n        name: user.name\r\n      },\r\n      type: 'message',\r\n      text: value\r\n    }).subscribe(id => console.log(\"Posted activity, assigned ID \", id), error => console.log(\"Error posting activity\", error));\r\n    if (!event.value) {\r\n      setMessages(oldMessages => [...oldMessages, {\r\n        author: user,\r\n        text: value,\r\n        timestamp: new Date()\r\n      }]);\r\n    }\r\n  };\r\n  return <Chat messages={messages} user={user} onMessageSend={addNewMessage} attachmentTemplate={аttachmentTemplate} />;\r\n};\r\nReactDOM.render(<App />, document.querySelector('my-app'));"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}