{"ast":null,"code":"\"use strict\";\n\nvar isArray_1 = require('../util/isArray');\nfunction isNumeric(val) {\n  // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n  // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n  // subtraction forces infinities to NaN\n  // adding 1 corrects loss of precision from parseFloat (#15100)\n  return !isArray_1.isArray(val) && val - parseFloat(val) + 1 >= 0;\n}\nexports.isNumeric = isNumeric;\n;","map":{"version":3,"mappings":";;AAAA,wBAAwB,iBAAiB,CAAC;AAE1C,mBAA0BA,GAAQ;EAChC;EACA;EACA;EACA;EACA,OAAO,CAACC,iBAAO,CAACD,GAAG,CAAC,IAAKA,GAAG,GAAGE,UAAU,CAACF,GAAG,CAAC,GAAG,CAAC,IAAK,CAAC;AAC1D;AANgBG,iBAAS,YAMxB;AAAA","names":["val","isArray_1","parseFloat","exports"],"sources":["C:\\Projects\\health-care-chatbot\\node_modules\\src\\util\\isNumeric.ts"],"sourcesContent":["import { isArray } from '../util/isArray';\n\nexport function isNumeric(val: any): val is number {\n  // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n  // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n  // subtraction forces infinities to NaN\n  // adding 1 corrects loss of precision from parseFloat (#15100)\n  return !isArray(val) && (val - parseFloat(val) + 1) >= 0;\n};\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}