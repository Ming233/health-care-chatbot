{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar isFunction_1 = require('./util/isFunction');\nvar Subscription_1 = require('./Subscription');\nvar Observer_1 = require('./Observer');\nvar rxSubscriber_1 = require('./symbol/rxSubscriber');\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nvar Subscriber = function (_super) {\n  __extends(Subscriber, _super);\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  function Subscriber(destinationOrNext, error, complete) {\n    _super.call(this);\n    this.syncErrorValue = null;\n    this.syncErrorThrown = false;\n    this.syncErrorThrowable = false;\n    this.isStopped = false;\n    switch (arguments.length) {\n      case 0:\n        this.destination = Observer_1.empty;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = Observer_1.empty;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          // HACK(benlesh): To resolve an issue where Node users may have multiple\n          // copies of rxjs in their node_modules directory.\n          if (isTrustedSubscriber(destinationOrNext)) {\n            var trustedSubscriber = destinationOrNext[rxSubscriber_1.rxSubscriber]();\n            this.syncErrorThrowable = trustedSubscriber.syncErrorThrowable;\n            this.destination = trustedSubscriber;\n            trustedSubscriber.add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber(this, destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);\n        break;\n    }\n  }\n  Subscriber.prototype[rxSubscriber_1.rxSubscriber] = function () {\n    return this;\n  };\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   */\n  Subscriber.create = function (next, error, complete) {\n    var subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  };\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  Subscriber.prototype.next = function (value) {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  };\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached {@link Error}. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  Subscriber.prototype.error = function (err) {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  };\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  Subscriber.prototype.complete = function () {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  };\n  Subscriber.prototype.unsubscribe = function () {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    _super.prototype.unsubscribe.call(this);\n  };\n  Subscriber.prototype._next = function (value) {\n    this.destination.next(value);\n  };\n  Subscriber.prototype._error = function (err) {\n    this.destination.error(err);\n    this.unsubscribe();\n  };\n  Subscriber.prototype._complete = function () {\n    this.destination.complete();\n    this.unsubscribe();\n  };\n  /** @deprecated internal use only */\n  Subscriber.prototype._unsubscribeAndRecycle = function () {\n    var _a = this,\n      _parent = _a._parent,\n      _parents = _a._parents;\n    this._parent = null;\n    this._parents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parent = _parent;\n    this._parents = _parents;\n    return this;\n  };\n  return Subscriber;\n}(Subscription_1.Subscription);\nexports.Subscriber = Subscriber;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SafeSubscriber = function (_super) {\n  __extends(SafeSubscriber, _super);\n  function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {\n    _super.call(this);\n    this._parentSubscriber = _parentSubscriber;\n    var next;\n    var context = this;\n    if (isFunction_1.isFunction(observerOrNext)) {\n      next = observerOrNext;\n    } else if (observerOrNext) {\n      next = observerOrNext.next;\n      error = observerOrNext.error;\n      complete = observerOrNext.complete;\n      if (observerOrNext !== Observer_1.empty) {\n        context = Object.create(observerOrNext);\n        if (isFunction_1.isFunction(context.unsubscribe)) {\n          this.add(context.unsubscribe.bind(context));\n        }\n        context.unsubscribe = this.unsubscribe.bind(this);\n      }\n    }\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n  SafeSubscriber.prototype.next = function (value) {\n    if (!this.isStopped && this._next) {\n      var _parentSubscriber = this._parentSubscriber;\n      if (!_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  };\n  SafeSubscriber.prototype.error = function (err) {\n    if (!this.isStopped) {\n      var _parentSubscriber = this._parentSubscriber;\n      if (this._error) {\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n        throw err;\n      } else {\n        _parentSubscriber.syncErrorValue = err;\n        _parentSubscriber.syncErrorThrown = true;\n        this.unsubscribe();\n      }\n    }\n  };\n  SafeSubscriber.prototype.complete = function () {\n    var _this = this;\n    if (!this.isStopped) {\n      var _parentSubscriber = this._parentSubscriber;\n      if (this._complete) {\n        var wrappedComplete = function () {\n          return _this._complete.call(_this._context);\n        };\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  };\n  SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      throw err;\n    }\n  };\n  SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      parent.syncErrorValue = err;\n      parent.syncErrorThrown = true;\n      return true;\n    }\n    return false;\n  };\n  /** @deprecated internal use only */\n  SafeSubscriber.prototype._unsubscribe = function () {\n    var _parentSubscriber = this._parentSubscriber;\n    this._context = null;\n    this._parentSubscriber = null;\n    _parentSubscriber.unsubscribe();\n  };\n  return SafeSubscriber;\n}(Subscriber);\nfunction isTrustedSubscriber(obj) {\n  return obj instanceof Subscriber || 'syncErrorThrowable' in obj && obj[rxSubscriber_1.rxSubscriber];\n}","map":{"version":3,"mappings":"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","names":["__extends","destinationOrNext","error","complete","_super","arguments","length","destination","Observer_1","isTrustedSubscriber","trustedSubscriber","rxSubscriber_1","syncErrorThrowable","add","SafeSubscriber","Subscriber","next","subscriber","value","isStopped","_next","err","_error","_complete","closed","unsubscribe","_parent","_parents","Subscription_1","exports","_parentSubscriber","observerOrNext","context","isFunction_1","Object","create","bind","_context","__tryOrUnsub","__tryOrSetError","syncErrorValue","syncErrorThrown","wrappedComplete","call","_this","fn","parent","obj"],"sources":["C:\\Projects\\health-care-chatbot\\node_modules\\src\\Subscriber.ts"],"sourcesContent":["import { isFunction } from './util/isFunction';\nimport { Observer, PartialObserver } from './Observer';\nimport { Subscription } from './Subscription';\nimport { empty as emptyObserver } from './Observer';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [rxSubscriberSymbol]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  public syncErrorValue: any = null;\n  public syncErrorThrown: boolean = false;\n  public syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          // HACK(benlesh): To resolve an issue where Node users may have multiple\n          // copies of rxjs in their node_modules directory.\n          if (isTrustedSubscriber(destinationOrNext)) {\n            const trustedSubscriber = destinationOrNext[rxSubscriberSymbol]() as Subscriber<any>;\n            this.syncErrorThrowable = trustedSubscriber.syncErrorThrowable;\n            this.destination = trustedSubscriber;\n            trustedSubscriber.add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached {@link Error}. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n\n  /** @deprecated internal use only */ _unsubscribeAndRecycle(): Subscriber<T> {\n    const { _parent, _parents } = this;\n    this._parent = null;\n    this._parents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parent = _parent;\n    this._parents = _parents;\n    return this;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parentSubscriber: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (observerOrNext !== emptyObserver) {\n        context = Object.create(observerOrNext);\n        if (isFunction(context.unsubscribe)) {\n          this.add(<() => void> context.unsubscribe.bind(context));\n        }\n        context.unsubscribe = this.unsubscribe.bind(this);\n      }\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parentSubscriber } = this;\n      if (!_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._error) {\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n        throw err;\n      } else {\n        _parentSubscriber.syncErrorValue = err;\n        _parentSubscriber.syncErrorThrown = true;\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._complete) {\n        const wrappedComplete = () => this._complete.call(this._context);\n\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      throw err;\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      parent.syncErrorValue = err;\n      parent.syncErrorThrown = true;\n      return true;\n    }\n    return false;\n  }\n\n  /** @deprecated internal use only */ _unsubscribe(): void {\n    const { _parentSubscriber } = this;\n    this._context = null;\n    this._parentSubscriber = null;\n    _parentSubscriber.unsubscribe();\n  }\n}\n\nfunction isTrustedSubscriber(obj: any) {\n  return obj instanceof Subscriber || ('syncErrorThrowable' in obj && obj[rxSubscriberSymbol]);\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}