{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nfunction refCount() {\n  return function refCountOperatorFunction(source) {\n    return source.lift(new RefCountOperator(source));\n  };\n}\nexports.refCount = refCount;\nvar RefCountOperator = function () {\n  function RefCountOperator(connectable) {\n    this.connectable = connectable;\n  }\n  RefCountOperator.prototype.call = function (subscriber, source) {\n    var connectable = this.connectable;\n    connectable._refCount++;\n    var refCounter = new RefCountSubscriber(subscriber, connectable);\n    var subscription = source.subscribe(refCounter);\n    if (!refCounter.closed) {\n      refCounter.connection = connectable.connect();\n    }\n    return subscription;\n  };\n  return RefCountOperator;\n}();\nvar RefCountSubscriber = function (_super) {\n  __extends(RefCountSubscriber, _super);\n  function RefCountSubscriber(destination, connectable) {\n    _super.call(this, destination);\n    this.connectable = connectable;\n  }\n  /** @deprecated internal use only */\n  RefCountSubscriber.prototype._unsubscribe = function () {\n    var connectable = this.connectable;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n    this.connectable = null;\n    var refCount = connectable._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n    connectable._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    var connection = this.connection;\n    var sharedConnection = connectable._connection;\n    this.connection = null;\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  };\n  return RefCountSubscriber;\n}(Subscriber_1.Subscriber);","map":{"version":3,"mappings":";;;;;;;;;AACA,2BAA2B,eAAe,CAAC;AAM3C;EACE,OAAO,kCAAkCA,MAAgC;IACvE,OAAOA,MAAM,CAACC,IAAI,CAAC,IAAIC,gBAAgB,CAACF,MAAM,CAAC,CAAC;EAClD,CAAC;AACH;AAJgBG,gBAAQ,WAIvB;AAED;EACE,0BAAoBC,WAAqC;IAArC,gBAAW,GAAXA,WAAW;EAC/B;EACAF,+BAAI,GAAJ,UAAKG,UAAyB,EAAEL,MAAW;IAEjC,kCAAW;IACZI,WAAY,CAACE,SAAS,EAAE;IAE/B,IAAMC,UAAU,GAAG,IAAIC,kBAAkB,CAACH,UAAU,EAAED,WAAW,CAAC;IAClE,IAAMK,YAAY,GAAGT,MAAM,CAACU,SAAS,CAACH,UAAU,CAAC;IAEjD,IAAI,CAACA,UAAU,CAACI,MAAM,EAAE;MACfJ,UAAW,CAACK,UAAU,GAAGR,WAAW,CAACS,OAAO,EAAE;IACvD;IAEA,OAAOJ,YAAY;EACrB,CAAC;EACH,uBAAC;AAAD,CAAC,EAjBD;AAmBA;EAAoCK;EAIlC,4BAAYC,WAA0B,EAClBX,WAAqC;IACvDY,kBAAMD,WAAW,CAAC;IADA,gBAAW,GAAXX,WAAW;EAE/B;EAEA;EAAqCI,yCAAY,GAAZ;IAE3B,kCAAW;IACnB,IAAI,CAACJ,WAAW,EAAE;MAChB,IAAI,CAACQ,UAAU,GAAG,IAAI;MACtB;IACF;IAEA,IAAI,CAACR,WAAW,GAAG,IAAI;IACvB,IAAMa,QAAQ,GAAUb,WAAY,CAACE,SAAS;IAC9C,IAAIW,QAAQ,IAAI,CAAC,EAAE;MACjB,IAAI,CAACL,UAAU,GAAG,IAAI;MACtB;IACF;IAEOR,WAAY,CAACE,SAAS,GAAGW,QAAQ,GAAG,CAAC;IAC5C,IAAIA,QAAQ,GAAG,CAAC,EAAE;MAChB,IAAI,CAACL,UAAU,GAAG,IAAI;MACtB;IACF;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACQ,gCAAU;IAClB,IAAMM,gBAAgB,GAAUd,WAAY,CAACe,WAAW;IACxD,IAAI,CAACP,UAAU,GAAG,IAAI;IAEtB,IAAIM,gBAAgB,KAAK,CAACN,UAAU,IAAIM,gBAAgB,KAAKN,UAAU,CAAC,EAAE;MACxEM,gBAAgB,CAACE,WAAW,EAAE;IAChC;EACF,CAAC;EACH,yBAAC;AAAD,CAAC,CA7DmCC,uBAAU","names":["source","lift","RefCountOperator","exports","connectable","subscriber","_refCount","refCounter","RefCountSubscriber","subscription","subscribe","closed","connection","connect","__extends","destination","_super","refCount","sharedConnection","_connection","unsubscribe","Subscriber_1"],"sources":["C:\\Projects\\health-care-chatbot\\node_modules\\src\\operators\\refCount.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { Observable } from '../Observable';\n\nexport function refCount<T>(): MonoTypeOperatorFunction<T> {\n  return function refCountOperatorFunction(source: ConnectableObservable<T>): Observable<T> {\n    return source.lift(new RefCountOperator(source));\n  };\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}