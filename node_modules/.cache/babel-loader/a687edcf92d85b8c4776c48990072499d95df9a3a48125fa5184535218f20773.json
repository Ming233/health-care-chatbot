{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar payloadAssembler_1 = require(\"../assemblers/payloadAssembler\");\nvar payloadTypes_1 = require(\"./payloadTypes\");\n/**\n * Orchestrates assemly of payloads\n */\nvar PayloadAssemblerManager = /** @class */function () {\n  function PayloadAssemblerManager(streamManager, onReceiveResponse, onReceiveRequest) {\n    this.activeAssemblers = {};\n    this.streamManager = streamManager;\n    this.onReceiveRequest = onReceiveRequest;\n    this.onReceiveResponse = onReceiveResponse;\n  }\n  PayloadAssemblerManager.prototype.getPayloadStream = function (header) {\n    if (header.payloadType === payloadTypes_1.PayloadTypes.stream) {\n      return this.streamManager.getPayloadStream(header);\n    } else if (!this.activeAssemblers[header.id]) {\n      var assembler = this.createPayloadAssembler(header);\n      if (assembler) {\n        this.activeAssemblers[header.id] = assembler;\n        return assembler.getPayloadStream();\n      }\n    }\n  };\n  PayloadAssemblerManager.prototype.onReceive = function (header, contentStream, contentLength) {\n    if (header.payloadType === payloadTypes_1.PayloadTypes.stream) {\n      this.streamManager.onReceive(header, contentStream, contentLength);\n    } else {\n      if (this.activeAssemblers && this.activeAssemblers[header.id]) {\n        var assembler = this.activeAssemblers[header.id];\n        assembler.onReceive(header, contentStream, contentLength);\n      }\n      if (header.end) {\n        delete this.activeAssemblers[header.id];\n      }\n    }\n  };\n  PayloadAssemblerManager.prototype.createPayloadAssembler = function (header) {\n    if (header.payloadType === payloadTypes_1.PayloadTypes.request) {\n      return new payloadAssembler_1.PayloadAssembler(this.streamManager, {\n        header: header,\n        onCompleted: this.onReceiveRequest\n      });\n    } else if (header.payloadType === payloadTypes_1.PayloadTypes.response) {\n      return new payloadAssembler_1.PayloadAssembler(this.streamManager, {\n        header: header,\n        onCompleted: this.onReceiveResponse\n      });\n    }\n  };\n  return PayloadAssemblerManager;\n}();\nexports.PayloadAssemblerManager = PayloadAssemblerManager;","map":{"version":3,"mappings":";;;;;AAQA;AAGA;AAEA;;;AAGA;EAMI,iCAAmBA,aAA4B,EAAEC,iBAA2B,EAAEC,gBAA0B;IAFvF,qBAAgB,GAAuC,EAAE;IAGtE,IAAI,CAACF,aAAa,GAAGA,aAAa;IAClC,IAAI,CAACE,gBAAgB,GAAGA,gBAAgB;IACxC,IAAI,CAACD,iBAAiB,GAAGA,iBAAiB;EAC9C;EAEOE,kDAAgB,GAAvB,UAAwBC,MAAe;IACnC,IAAIA,MAAM,CAACC,WAAW,KAAKC,2BAAY,CAACC,MAAM,EAAE;MAC5C,OAAO,IAAI,CAACP,aAAa,CAACQ,gBAAgB,CAACJ,MAAM,CAAC;KACrD,MAAM,IAAI,CAAC,IAAI,CAACK,gBAAgB,CAACL,MAAM,CAACM,EAAE,CAAC,EAAE;MAC1C,IAAIC,SAAS,GAAG,IAAI,CAACC,sBAAsB,CAACR,MAAM,CAAC;MAEnD,IAAIO,SAAS,EAAE;QACX,IAAI,CAACF,gBAAgB,CAACL,MAAM,CAACM,EAAE,CAAC,GAAGC,SAAS;QAC5C,OAAOA,SAAS,CAACH,gBAAgB,EAAE;;;EAG/C,CAAC;EAEML,2CAAS,GAAhB,UAAiBC,MAAe,EAAES,aAAiC,EAAEC,aAAqB;IACtF,IAAIV,MAAM,CAACC,WAAW,KAAKC,2BAAY,CAACC,MAAM,EAAE;MAC5C,IAAI,CAACP,aAAa,CAACe,SAAS,CAACX,MAAM,EAAES,aAAa,EAAEC,aAAa,CAAC;KACrE,MAAM;MACH,IAAI,IAAI,CAACL,gBAAgB,IAAI,IAAI,CAACA,gBAAgB,CAACL,MAAM,CAACM,EAAE,CAAC,EAAE;QAC3D,IAAIC,SAAS,GAAG,IAAI,CAACF,gBAAgB,CAACL,MAAM,CAACM,EAAE,CAAC;QAChDC,SAAS,CAACI,SAAS,CAACX,MAAM,EAAES,aAAa,EAAEC,aAAa,CAAC;;MAE7D,IAAIV,MAAM,CAACY,GAAG,EAAE;QACZ,OAAO,IAAI,CAACP,gBAAgB,CAACL,MAAM,CAACM,EAAE,CAAC;;;EAGnD,CAAC;EAEOP,wDAAsB,GAA9B,UAA+BC,MAAe;IAC1C,IAAIA,MAAM,CAACC,WAAW,KAAKC,2BAAY,CAACW,OAAO,EAAE;MAC7C,OAAO,IAAIC,mCAAgB,CAAC,IAAI,CAAClB,aAAa,EAAE;QAACI,MAAM,EAAEA,MAAM;QAAEe,WAAW,EAAE,IAAI,CAACjB;MAAgB,CAAC,CAAC;KACxG,MAAM,IAAIE,MAAM,CAACC,WAAW,KAAKC,2BAAY,CAACc,QAAQ,EAAE;MACrD,OAAO,IAAIF,mCAAgB,CAAC,IAAI,CAAClB,aAAa,EAAE;QAACI,MAAM,EAAEA,MAAM;QAAEe,WAAW,EAAE,IAAI,CAAClB;MAAiB,CAAC,CAAC;;EAE9G,CAAC;EACL,8BAAC;AAAD,CAAC,EA9CD;AAAaoB","names":["streamManager","onReceiveResponse","onReceiveRequest","PayloadAssemblerManager","header","payloadType","payloadTypes_1","stream","getPayloadStream","activeAssemblers","id","assembler","createPayloadAssembler","contentStream","contentLength","onReceive","end","request","payloadAssembler_1","onCompleted","response","exports"],"sources":["C:\\Projects\\health-care-chatbot\\node_modules\\botframework-streaming\\src\\payloads\\payloadAssemblerManager.ts"],"sourcesContent":["/**\r\n * @module botframework-streaming\r\n */\r\n/**\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nimport { SubscribableStream } from '../subscribableStream';\r\nimport { PayloadAssembler } from '../assemblers/payloadAssembler';\r\nimport { StreamManager } from './streamManager';\r\nimport { IHeader } from '../interfaces/IHeader';\r\nimport { PayloadTypes } from './payloadTypes';\r\n\r\n/**\r\n * Orchestrates assemly of payloads\r\n */\r\nexport class PayloadAssemblerManager {\r\n    private readonly onReceiveRequest;\r\n    private readonly onReceiveResponse;\r\n    private readonly streamManager: StreamManager;\r\n    private readonly activeAssemblers: { [id: string]: PayloadAssembler } = {};\r\n\r\n    public constructor(streamManager: StreamManager, onReceiveResponse: Function, onReceiveRequest: Function) {\r\n        this.streamManager = streamManager;\r\n        this.onReceiveRequest = onReceiveRequest;\r\n        this.onReceiveResponse = onReceiveResponse;\r\n    }\r\n\r\n    public getPayloadStream(header: IHeader): SubscribableStream {\r\n        if (header.payloadType === PayloadTypes.stream) {\r\n            return this.streamManager.getPayloadStream(header);\r\n        } else if (!this.activeAssemblers[header.id]) {\r\n            let assembler = this.createPayloadAssembler(header);\r\n\r\n            if (assembler) {\r\n                this.activeAssemblers[header.id] = assembler;\r\n                return assembler.getPayloadStream();\r\n            }\r\n        }\r\n    }\r\n\r\n    public onReceive(header: IHeader, contentStream: SubscribableStream, contentLength: number): void {\r\n        if (header.payloadType === PayloadTypes.stream) {\r\n            this.streamManager.onReceive(header, contentStream, contentLength);\r\n        } else {\r\n            if (this.activeAssemblers && this.activeAssemblers[header.id]) {\r\n                let assembler = this.activeAssemblers[header.id];\r\n                assembler.onReceive(header, contentStream, contentLength);\r\n            }\r\n            if (header.end) {\r\n                delete this.activeAssemblers[header.id];\r\n            }\r\n        }\r\n    }\r\n\r\n    private createPayloadAssembler(header: IHeader): PayloadAssembler {\r\n        if (header.payloadType === PayloadTypes.request) {\r\n            return new PayloadAssembler(this.streamManager, {header: header, onCompleted: this.onReceiveRequest});\r\n        } else if (header.payloadType === PayloadTypes.response) {\r\n            return new PayloadAssembler(this.streamManager, {header: header, onCompleted: this.onReceiveResponse});\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}