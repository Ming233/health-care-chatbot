{"ast":null,"code":"\"use strict\";\n\nvar Observable_1 = require('./Observable');\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nvar Notification = function () {\n  function Notification(kind, value, error) {\n    this.kind = kind;\n    this.value = value;\n    this.error = error;\n    this.hasValue = kind === 'N';\n  }\n  /**\n   * Delivers to the given `observer` the value wrapped by this Notification.\n   * @param {Observer} observer\n   * @return\n   */\n  Notification.prototype.observe = function (observer) {\n    switch (this.kind) {\n      case 'N':\n        return observer.next && observer.next(this.value);\n      case 'E':\n        return observer.error && observer.error(this.error);\n      case 'C':\n        return observer.complete && observer.complete();\n    }\n  };\n  /**\n   * Given some {@link Observer} callbacks, deliver the value represented by the\n   * current Notification to the correctly corresponding callback.\n   * @param {function(value: T): void} next An Observer `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  Notification.prototype.do = function (next, error, complete) {\n    var kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return next && next(this.value);\n      case 'E':\n        return error && error(this.error);\n      case 'C':\n        return complete && complete();\n    }\n  };\n  /**\n   * Takes an Observer or its individual callback functions, and calls `observe`\n   * or `do` methods accordingly.\n   * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n   * the `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  Notification.prototype.accept = function (nextOrObserver, error, complete) {\n    if (nextOrObserver && typeof nextOrObserver.next === 'function') {\n      return this.observe(nextOrObserver);\n    } else {\n      return this.do(nextOrObserver, error, complete);\n    }\n  };\n  /**\n   * Returns a simple Observable that just delivers the notification represented\n   * by this Notification instance.\n   * @return {any}\n   */\n  Notification.prototype.toObservable = function () {\n    var kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return Observable_1.Observable.of(this.value);\n      case 'E':\n        return Observable_1.Observable.throw(this.error);\n      case 'C':\n        return Observable_1.Observable.empty();\n    }\n    throw new Error('unexpected notification kind value');\n  };\n  /**\n   * A shortcut to create a Notification instance of the type `next` from a\n   * given value.\n   * @param {T} value The `next` value.\n   * @return {Notification<T>} The \"next\" Notification representing the\n   * argument.\n   */\n  Notification.createNext = function (value) {\n    if (typeof value !== 'undefined') {\n      return new Notification('N', value);\n    }\n    return Notification.undefinedValueNotification;\n  };\n  /**\n   * A shortcut to create a Notification instance of the type `error` from a\n   * given error.\n   * @param {any} [err] The `error` error.\n   * @return {Notification<T>} The \"error\" Notification representing the\n   * argument.\n   */\n  Notification.createError = function (err) {\n    return new Notification('E', undefined, err);\n  };\n  /**\n   * A shortcut to create a Notification instance of the type `complete`.\n   * @return {Notification<any>} The valueless \"complete\" Notification.\n   */\n  Notification.createComplete = function () {\n    return Notification.completeNotification;\n  };\n  Notification.completeNotification = new Notification('C');\n  Notification.undefinedValueNotification = new Notification('N', undefined);\n  return Notification;\n}();\nexports.Notification = Notification;","map":{"version":3,"mappings":";;AACA,2BAA2B,cAAc,CAAC;AAE1C;;;;;;;;;;;;;;AAcA;EAGE,sBAAmBA,IAAY,EAASC,KAAS,EAASC,KAAW;IAAlD,SAAI,GAAJF,IAAI;IAAiB,UAAK,GAALC,KAAK;IAAa,UAAK,GAALC,KAAK;IAC7D,IAAI,CAACC,QAAQ,GAAGH,IAAI,KAAK,GAAG;EAC9B;EAEA;;;;;EAKAI,8BAAO,GAAP,UAAQC,QAA4B;IAClC,QAAQ,IAAI,CAACL,IAAI;MACf,KAAK,GAAG;QACN,OAAOK,QAAQ,CAACC,IAAI,IAAID,QAAQ,CAACC,IAAI,CAAC,IAAI,CAACL,KAAK,CAAC;MACnD,KAAK,GAAG;QACN,OAAOI,QAAQ,CAACH,KAAK,IAAIG,QAAQ,CAACH,KAAK,CAAC,IAAI,CAACA,KAAK,CAAC;MACrD,KAAK,GAAG;QACN,OAAOG,QAAQ,CAACE,QAAQ,IAAIF,QAAQ,CAACE,QAAQ,EAAE;IAAC;EAEtD,CAAC;EAED;;;;;;;;EAQAH,yBAAE,GAAF,UAAGE,IAAwB,EAAEJ,KAA0B,EAAEK,QAAqB;IAC5E,IAAMP,IAAI,GAAG,IAAI,CAACA,IAAI;IACtB,QAAQA,IAAI;MACV,KAAK,GAAG;QACN,OAAOM,IAAI,IAAIA,IAAI,CAAC,IAAI,CAACL,KAAK,CAAC;MACjC,KAAK,GAAG;QACN,OAAOC,KAAK,IAAIA,KAAK,CAAC,IAAI,CAACA,KAAK,CAAC;MACnC,KAAK,GAAG;QACN,OAAOK,QAAQ,IAAIA,QAAQ,EAAE;IAAC;EAEpC,CAAC;EAED;;;;;;;;;EASAH,6BAAM,GAAN,UAAOI,cAAyD,EAAEN,KAA0B,EAAEK,QAAqB;IACjH,IAAIC,cAAc,IAAI,OAA4BA,cAAe,CAACF,IAAI,KAAK,UAAU,EAAE;MACrF,OAAO,IAAI,CAACG,OAAO,CAAqBD,cAAc,CAAC;IACzD,CAAC,MAAM;MACL,OAAO,IAAI,CAACE,EAAE,CAAqBF,cAAc,EAAEN,KAAK,EAAEK,QAAQ,CAAC;IACrE;EACF,CAAC;EAED;;;;;EAKAH,mCAAY,GAAZ;IACE,IAAMJ,IAAI,GAAG,IAAI,CAACA,IAAI;IACtB,QAAQA,IAAI;MACV,KAAK,GAAG;QACN,OAAOW,uBAAU,CAACC,EAAE,CAAC,IAAI,CAACX,KAAK,CAAC;MAClC,KAAK,GAAG;QACN,OAAOU,uBAAU,CAACE,KAAK,CAAC,IAAI,CAACX,KAAK,CAAC;MACrC,KAAK,GAAG;QACN,OAAOS,uBAAU,CAACG,KAAK,EAAK;IAAC;IAEjC,MAAM,IAAIC,KAAK,CAAC,oCAAoC,CAAC;EACvD,CAAC;EAKD;;;;;;;EAOOX,uBAAU,GAAjB,UAAqBH,KAAQ;IAC3B,IAAI,OAAOA,KAAK,KAAK,WAAW,EAAE;MAChC,OAAO,IAAIG,YAAY,CAAC,GAAG,EAAEH,KAAK,CAAC;IACrC;IACA,OAAOG,YAAY,CAACY,0BAA0B;EAChD,CAAC;EAED;;;;;;;EAOOZ,wBAAW,GAAlB,UAAsBa,GAAS;IAC7B,OAAO,IAAIb,YAAY,CAAC,GAAG,EAAEc,SAAS,EAAED,GAAG,CAAC;EAC9C,CAAC;EAED;;;;EAIOb,2BAAc,GAArB;IACE,OAAOA,YAAY,CAACe,oBAAoB;EAC1C,CAAC;EAlCcf,iCAAoB,GAAsB,IAAIA,YAAY,CAAC,GAAG,CAAC;EAC/DA,uCAA0B,GAAsB,IAAIA,YAAY,CAAC,GAAG,EAAEc,SAAS,CAAC;EAkCjG,mBAAC;AAAD,CAAC,EAjHD;AAAaE,oBAAY,eAiHxB","names":["kind","value","error","hasValue","Notification","observer","next","complete","nextOrObserver","observe","do","Observable_1","of","throw","empty","Error","undefinedValueNotification","err","undefined","completeNotification","exports"],"sources":["C:\\Projects\\health-care-chatbot\\node_modules\\src\\Notification.ts"],"sourcesContent":["import { PartialObserver } from './Observer';\nimport { Observable } from './Observable';\n\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nexport class Notification<T> {\n  hasValue: boolean;\n\n  constructor(public kind: string, public value?: T, public error?: any) {\n    this.hasValue = kind === 'N';\n  }\n\n  /**\n   * Delivers to the given `observer` the value wrapped by this Notification.\n   * @param {Observer} observer\n   * @return\n   */\n  observe(observer: PartialObserver<T>): any {\n    switch (this.kind) {\n      case 'N':\n        return observer.next && observer.next(this.value);\n      case 'E':\n        return observer.error && observer.error(this.error);\n      case 'C':\n        return observer.complete && observer.complete();\n    }\n  }\n\n  /**\n   * Given some {@link Observer} callbacks, deliver the value represented by the\n   * current Notification to the correctly corresponding callback.\n   * @param {function(value: T): void} next An Observer `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  do(next: (value: T) => void, error?: (err: any) => void, complete?: () => void): any {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return next && next(this.value);\n      case 'E':\n        return error && error(this.error);\n      case 'C':\n        return complete && complete();\n    }\n  }\n\n  /**\n   * Takes an Observer or its individual callback functions, and calls `observe`\n   * or `do` methods accordingly.\n   * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n   * the `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  accept(nextOrObserver: PartialObserver<T> | ((value: T) => void), error?: (err: any) => void, complete?: () => void) {\n    if (nextOrObserver && typeof (<PartialObserver<T>>nextOrObserver).next === 'function') {\n      return this.observe(<PartialObserver<T>>nextOrObserver);\n    } else {\n      return this.do(<(value: T) => void>nextOrObserver, error, complete);\n    }\n  }\n\n  /**\n   * Returns a simple Observable that just delivers the notification represented\n   * by this Notification instance.\n   * @return {any}\n   */\n  toObservable(): Observable<T> {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return Observable.of(this.value);\n      case 'E':\n        return Observable.throw(this.error);\n      case 'C':\n        return Observable.empty<T>();\n    }\n    throw new Error('unexpected notification kind value');\n  }\n\n  private static completeNotification: Notification<any> = new Notification('C');\n  private static undefinedValueNotification: Notification<any> = new Notification('N', undefined);\n\n  /**\n   * A shortcut to create a Notification instance of the type `next` from a\n   * given value.\n   * @param {T} value The `next` value.\n   * @return {Notification<T>} The \"next\" Notification representing the\n   * argument.\n   */\n  static createNext<T>(value: T): Notification<T> {\n    if (typeof value !== 'undefined') {\n      return new Notification('N', value);\n    }\n    return Notification.undefinedValueNotification;\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `error` from a\n   * given error.\n   * @param {any} [err] The `error` error.\n   * @return {Notification<T>} The \"error\" Notification representing the\n   * argument.\n   */\n  static createError<T>(err?: any): Notification<T> {\n    return new Notification('E', undefined, err);\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `complete`.\n   * @return {Notification<any>} The valueless \"complete\" Notification.\n   */\n  static createComplete(): Notification<any> {\n    return Notification.completeNotification;\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}