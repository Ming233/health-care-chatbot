{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../Subject');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nfunction retryWhen(notifier) {\n  return function (source) {\n    return source.lift(new RetryWhenOperator(notifier, source));\n  };\n}\nexports.retryWhen = retryWhen;\nvar RetryWhenOperator = function () {\n  function RetryWhenOperator(notifier, source) {\n    this.notifier = notifier;\n    this.source = source;\n  }\n  RetryWhenOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n  };\n  return RetryWhenOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RetryWhenSubscriber = function (_super) {\n  __extends(RetryWhenSubscriber, _super);\n  function RetryWhenSubscriber(destination, notifier, source) {\n    _super.call(this, destination);\n    this.notifier = notifier;\n    this.source = source;\n  }\n  RetryWhenSubscriber.prototype.error = function (err) {\n    if (!this.isStopped) {\n      var errors = this.errors;\n      var retries = this.retries;\n      var retriesSubscription = this.retriesSubscription;\n      if (!retries) {\n        errors = new Subject_1.Subject();\n        retries = tryCatch_1.tryCatch(this.notifier)(errors);\n        if (retries === errorObject_1.errorObject) {\n          return _super.prototype.error.call(this, errorObject_1.errorObject.e);\n        }\n        retriesSubscription = subscribeToResult_1.subscribeToResult(this, retries);\n      } else {\n        this.errors = null;\n        this.retriesSubscription = null;\n      }\n      this._unsubscribeAndRecycle();\n      this.errors = errors;\n      this.retries = retries;\n      this.retriesSubscription = retriesSubscription;\n      errors.next(err);\n    }\n  };\n  /** @deprecated internal use only */\n  RetryWhenSubscriber.prototype._unsubscribe = function () {\n    var _a = this,\n      errors = _a.errors,\n      retriesSubscription = _a.retriesSubscription;\n    if (errors) {\n      errors.unsubscribe();\n      this.errors = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  };\n  RetryWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    var _a = this,\n      errors = _a.errors,\n      retries = _a.retries,\n      retriesSubscription = _a.retriesSubscription;\n    this.errors = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n    this._unsubscribeAndRecycle();\n    this.errors = errors;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n    this.source.subscribe(this);\n  };\n  return RetryWhenSubscriber;\n}(OuterSubscriber_1.OuterSubscriber);","map":{"version":3,"mappings":"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","names":["notifier","source","lift","RetryWhenOperator","exports","subscriber","subscribe","RetryWhenSubscriber","__extends","destination","_super","err","isStopped","errors","retries","retriesSubscription","Subject_1","tryCatch_1","errorObject_1","error","e","subscribeToResult_1","_unsubscribeAndRecycle","next","unsubscribe","outerValue","innerValue","outerIndex","innerIndex","innerSub","OuterSubscriber_1"],"sources":["C:\\Projects\\health-care-chatbot\\node_modules\\src\\operators\\retryWhen.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nexport function retryWhen<T>(notifier: (errors: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RetryWhenOperator(notifier, source));\n}\n\nclass RetryWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (errors: Observable<any>) => Observable<any>,\n              public source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetryWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private errors: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (errors: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  error(err: any) {\n    if (!this.isStopped) {\n\n      let errors = this.errors;\n      let retries: any = this.retries;\n      let retriesSubscription = this.retriesSubscription;\n\n      if (!retries) {\n        errors = new Subject();\n        retries = tryCatch(this.notifier)(errors);\n        if (retries === errorObject) {\n          return super.error(errorObject.e);\n        }\n        retriesSubscription = subscribeToResult(this, retries);\n      } else {\n        this.errors = null;\n        this.retriesSubscription = null;\n      }\n\n      this._unsubscribeAndRecycle();\n\n      this.errors = errors;\n      this.retries = retries;\n      this.retriesSubscription = retriesSubscription;\n\n      errors.next(err);\n    }\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    const { errors, retriesSubscription } = this;\n    if (errors) {\n      errors.unsubscribe();\n      this.errors = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { errors, retries, retriesSubscription } = this;\n    this.errors = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n\n    this._unsubscribeAndRecycle();\n\n    this.errors = errors;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n\n    this.source.subscribe(this);\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}