{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * @module botframework-streaming\n */\n/**\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nvar stream_1 = require(\"stream\");\nvar SubscribableStream = /** @class */function (_super) {\n  __extends(SubscribableStream, _super);\n  function SubscribableStream(options) {\n    var _this = _super.call(this, options) || this;\n    _this.length = 0;\n    _this.bufferList = [];\n    return _this;\n  }\n  SubscribableStream.prototype._write = function (chunk, encoding, callback) {\n    var buffer = Buffer.from(chunk);\n    this.bufferList.push(buffer);\n    this.length += chunk.length;\n    if (this._onData) {\n      this._onData(buffer);\n    }\n    callback();\n  };\n  SubscribableStream.prototype._read = function (size) {\n    if (this.bufferList.length === 0) {\n      // null signals end of stream\n      this.push(null);\n    } else {\n      var total = 0;\n      while (total < size && this.bufferList.length > 0) {\n        var buffer = this.bufferList[0];\n        this.push(buffer);\n        this.bufferList.splice(0, 1);\n        total += buffer.length;\n      }\n    }\n  };\n  SubscribableStream.prototype.subscribe = function (onData) {\n    this._onData = onData;\n  };\n  return SubscribableStream;\n}(stream_1.Duplex);\nexports.SubscribableStream = SubscribableStream;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAGA;;;;AAIA;AAEA;EAAwCA;EAMpC,4BAAmBC,OAAuB;IAA1C,YACIC,kBAAMD,OAAO,CAAC;IANXE,YAAM,GAAW,CAAC;IAERA,gBAAU,GAAa,EAAE;;EAK1C;EAEOC,mCAAM,GAAb,UAAcC,KAAU,EAAEC,QAAgB,EAAEC,QAAwC;IAChF,IAAIC,MAAM,GAAGC,MAAM,CAACC,IAAI,CAACL,KAAK,CAAC;IAC/B,IAAI,CAACM,UAAU,CAACC,IAAI,CAACJ,MAAM,CAAC;IAC5B,IAAI,CAACK,MAAM,IAAIR,KAAK,CAACQ,MAAM;IAC3B,IAAI,IAAI,CAACC,OAAO,EAAE;MACd,IAAI,CAACA,OAAO,CAACN,MAAM,CAAC;;IAExBD,QAAQ,EAAE;EACd,CAAC;EAEMH,kCAAK,GAAZ,UAAaW,IAAY;IACrB,IAAI,IAAI,CAACJ,UAAU,CAACE,MAAM,KAAK,CAAC,EAAE;MAC9B;MACA,IAAI,CAACD,IAAI,CAAC,IAAI,CAAC;KAClB,MAAM;MACH,IAAII,KAAK,GAAG,CAAC;MACb,OAAOA,KAAK,GAAGD,IAAI,IAAI,IAAI,CAACJ,UAAU,CAACE,MAAM,GAAG,CAAC,EAAE;QAC/C,IAAIL,MAAM,GAAG,IAAI,CAACG,UAAU,CAAC,CAAC,CAAC;QAC/B,IAAI,CAACC,IAAI,CAACJ,MAAM,CAAC;QACjB,IAAI,CAACG,UAAU,CAACM,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;QAC5BD,KAAK,IAAIR,MAAM,CAACK,MAAM;;;EAGlC,CAAC;EAEMT,sCAAS,GAAhB,UAAiBc,MAA4B;IACzC,IAAI,CAACJ,OAAO,GAAGI,MAAM;EACzB,CAAC;EACL,yBAAC;AAAD,CAAC,CAtCuCC,eAAM;AAAjCC","names":["__extends","options","_super","_this","SubscribableStream","chunk","encoding","callback","buffer","Buffer","from","bufferList","push","length","_onData","size","total","splice","onData","stream_1","exports"],"sources":["C:\\Projects\\health-care-chatbot\\node_modules\\botframework-streaming\\src\\subscribableStream.ts"],"sourcesContent":["/**\r\n * @module botframework-streaming\r\n */\r\n/**\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nimport { Duplex, DuplexOptions } from 'stream';\r\n\r\nexport class SubscribableStream extends Duplex {\r\n    public length: number = 0;\r\n\r\n    private readonly bufferList: Buffer[] = [];\r\n    private _onData: (chunk: any) => void;\r\n\r\n    public constructor(options?: DuplexOptions) {\r\n        super(options);\r\n    }\r\n\r\n    public _write(chunk: any, encoding: string, callback: (error?: Error | null) => void): void {\r\n        let buffer = Buffer.from(chunk);\r\n        this.bufferList.push(buffer);\r\n        this.length += chunk.length;\r\n        if (this._onData) {\r\n            this._onData(buffer);\r\n        }\r\n        callback();\r\n    }\r\n\r\n    public _read(size: number): void {\r\n        if (this.bufferList.length === 0) {\r\n            // null signals end of stream\r\n            this.push(null);\r\n        } else {\r\n            let total = 0;\r\n            while (total < size && this.bufferList.length > 0) {\r\n                let buffer = this.bufferList[0];\r\n                this.push(buffer);\r\n                this.bufferList.splice(0, 1);\r\n                total += buffer.length;\r\n            }\r\n        }\r\n    }\r\n\r\n    public subscribe(onData: (chunk: any) => void): void {\r\n        this._onData = onData;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}