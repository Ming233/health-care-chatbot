{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar ContentStream = /** @class */function () {\n  function ContentStream(id, assembler) {\n    if (!assembler) {\n      throw Error('Null Argument Exception');\n    }\n    this.id = id;\n    this.assembler = assembler;\n  }\n  Object.defineProperty(ContentStream.prototype, \"contentType\", {\n    get: function () {\n      return this.assembler.payloadType;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ContentStream.prototype, \"length\", {\n    get: function () {\n      return this.assembler.contentLength;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  ContentStream.prototype.getStream = function () {\n    if (!this.stream) {\n      this.stream = this.assembler.getPayloadStream();\n    }\n    return this.stream;\n  };\n  ContentStream.prototype.cancel = function () {\n    this.assembler.close();\n  };\n  ContentStream.prototype.readAsString = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var bufferArray;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.readAll()];\n          case 1:\n            bufferArray = _a.sent().bufferArray;\n            return [2 /*return*/, (bufferArray || []).map(function (result) {\n              return result.toString('utf8');\n            }).join('')];\n        }\n      });\n    });\n  };\n  ContentStream.prototype.readAsJson = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var stringToParse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.readAsString()];\n          case 1:\n            stringToParse = _a.sent();\n            try {\n              return [2 /*return*/, JSON.parse(stringToParse)];\n            } catch (error) {\n              throw error;\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  ContentStream.prototype.readAll = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var allData, count, stream, chunk, readToEnd;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            allData = [];\n            count = 0;\n            stream = this.getStream();\n            // populate the array with any existing buffers\n            while (count < stream.length) {\n              chunk = stream.read(stream.length);\n              allData.push(chunk);\n              count += chunk.length;\n            }\n            if (!(count < this.length)) return [3 /*break*/, 2];\n            readToEnd = new Promise(function (resolve) {\n              var callback = function (cs) {\n                return function (chunk) {\n                  allData.push(chunk);\n                  count += chunk.length;\n                  if (count === cs.length) {\n                    resolve(true);\n                  }\n                };\n              };\n              stream.subscribe(callback(_this));\n            });\n            return [4 /*yield*/, readToEnd];\n          case 1:\n            _a.sent();\n            _a.label = 2;\n          case 2:\n            return [2 /*return*/, {\n              bufferArray: allData,\n              size: count\n            }];\n        }\n      });\n    });\n  };\n  return ContentStream;\n}();\nexports.ContentStream = ContentStream;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWA;EAKI,uBAAmBA,EAAU,EAAEC,SAA2B;IACtD,IAAI,CAACA,SAAS,EAAE;MACZ,MAAMC,KAAK,CAAC,yBAAyB,CAAC;;IAE1C,IAAI,CAACF,EAAE,GAAGA,EAAE;IACZ,IAAI,CAACC,SAAS,GAAGA,SAAS;EAC9B;EAEAE,sBAAWC,sCAAW;SAAtB;MACI,OAAO,IAAI,CAACH,SAAS,CAACI,WAAW;IACrC,CAAC;;;;EAEDF,sBAAWC,iCAAM;SAAjB;MACI,OAAO,IAAI,CAACH,SAAS,CAACK,aAAa;IACvC,CAAC;;;;EAEMF,iCAAS,GAAhB;IACI,IAAI,CAAC,IAAI,CAACG,MAAM,EAAE;MACd,IAAI,CAACA,MAAM,GAAG,IAAI,CAACN,SAAS,CAACO,gBAAgB,EAAE;;IAGnD,OAAO,IAAI,CAACD,MAAM;EACtB,CAAC;EAEMH,8BAAM,GAAb;IACI,IAAI,CAACH,SAAS,CAACQ,KAAK,EAAE;EAC1B,CAAC;EAEYL,oCAAY,GAAzB;;;;;;YAC4B,qBAAM,IAAI,CAACM,OAAO,EAAE;;YAApCC,WAAW,GAAKC,SAAoB,YAAzB;YACnB,sBAAO,CAACD,WAAW,IAAI,EAAE,EAAEE,GAAG,CAAC,gBAAM;cAAI,aAAM,CAACC,QAAQ,CAAC,MAAM,CAAC;YAAvB,CAAuB,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC;QAAC;;;GAC9E;EAEYX,kCAAU,GAAvB;;;;;;YACwB,qBAAM,IAAI,CAACY,YAAY,EAAE;;YAAzCC,aAAa,GAAGL,SAAyB;YAC7C,IAAI;cACA,sBAAUM,IAAI,CAACC,KAAK,CAACF,aAAa,CAAC;aACtC,CAAC,OAAOG,KAAK,EAAE;cACZ,MAAMA,KAAK;;;;;;GAElB;;EAEahB,+BAAO,GAArB;;;;;;;YAEQiB,OAAO,GAAkB,EAAE;YAC3BC,KAAK,GAAG,CAAC;YACTf,MAAM,GAAG,IAAI,CAACgB,SAAS,EAAE;YAE7B;YACA,OAAOD,KAAK,GAAGf,MAAM,CAACiB,MAAM,EAAE;cACtBC,KAAK,GAAGlB,MAAM,CAACmB,IAAI,CAACnB,MAAM,CAACiB,MAAM,CAAC;cACtCH,OAAO,CAACM,IAAI,CAACF,KAAK,CAAC;cACnBH,KAAK,IAAKG,KAAqB,CAACD,MAAM;;kBAGtCF,KAAK,GAAG,IAAI,CAACE,MAAM,GAAnB;YACII,SAAS,GAAG,IAAIC,OAAO,CAAU,UAACC,OAAO;cACzC,IAAIC,QAAQ,GAAG,UAACC,EAAiB;gBAAK,iBAACP,KAAU;kBAC7CJ,OAAO,CAACM,IAAI,CAACF,KAAK,CAAC;kBACnBH,KAAK,IAAKG,KAAqB,CAACD,MAAM;kBACtC,IAAIF,KAAK,KAAKU,EAAE,CAACR,MAAM,EAAE;oBACrBM,OAAO,CAAC,IAAI,CAAC;;gBAErB,CAAC;cANqC,CAMrC;cAEDvB,MAAM,CAAC0B,SAAS,CAACF,QAAQ,CAACG,KAAI,CAAC,CAAC;YACpC,CAAC,CAAC;YAEF,qBAAMN,SAAS;;YAAfhB,SAAe;;;YAGnB,sBAAO;cAACD,WAAW,EAAEU,OAAO;cAAEc,IAAI,EAAEb;YAAK,CAAC;QAAC;;;GAC9C;EAEL,oBAAC;AAAD,CAAC,EA/ED;AAAac","names":["id","assembler","Error","Object","ContentStream","payloadType","contentLength","stream","getPayloadStream","close","readAll","bufferArray","_a","map","toString","join","readAsString","stringToParse","JSON","parse","error","allData","count","getStream","length","chunk","read","push","readToEnd","Promise","resolve","callback","cs","subscribe","_this","size","exports"],"sources":["C:\\Projects\\health-care-chatbot\\node_modules\\botframework-streaming\\src\\contentStream.ts"],"sourcesContent":["/**\r\n * @module botframework-streaming\r\n */\r\n/**\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nimport { SubscribableStream } from './subscribableStream';\r\nimport { PayloadAssembler } from './assemblers';\r\nimport { INodeBuffer } from './interfaces/INodeBuffer';\r\n\r\nexport class ContentStream {\r\n    public id: string;\r\n    private readonly assembler: PayloadAssembler;\r\n    private stream: SubscribableStream;\r\n\r\n    public constructor(id: string, assembler: PayloadAssembler) {\r\n        if (!assembler) {\r\n            throw Error('Null Argument Exception');\r\n        }\r\n        this.id = id;\r\n        this.assembler = assembler;\r\n    }\r\n\r\n    public get contentType(): string {\r\n        return this.assembler.payloadType;\r\n    }\r\n\r\n    public get length(): number {\r\n        return this.assembler.contentLength;\r\n    }\r\n\r\n    public getStream(): SubscribableStream {\r\n        if (!this.stream) {\r\n            this.stream = this.assembler.getPayloadStream();\r\n        }\r\n\r\n        return this.stream;\r\n    }\r\n\r\n    public cancel(): void {\r\n        this.assembler.close();\r\n    }\r\n\r\n    public async readAsString(): Promise<string> {\r\n        const { bufferArray } = await this.readAll();\r\n        return (bufferArray || []).map(result => result.toString('utf8')).join('');\r\n    }\r\n\r\n    public async readAsJson<T>(): Promise<T> {\r\n        let stringToParse = await this.readAsString();\r\n        try {\r\n            return <T>JSON.parse(stringToParse);\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    private async readAll(): Promise<Record<string, any>> {\r\n    // do a read-all\r\n        let allData: INodeBuffer[] = [];\r\n        let count = 0;\r\n        let stream = this.getStream();\r\n\r\n        // populate the array with any existing buffers\r\n        while (count < stream.length) {\r\n            let chunk = stream.read(stream.length);\r\n            allData.push(chunk);\r\n            count += (chunk as INodeBuffer).length;\r\n        }\r\n\r\n        if (count < this.length) {\r\n            let readToEnd = new Promise<boolean>((resolve): void => {\r\n                let callback = (cs: ContentStream) => (chunk: any): void => {\r\n                    allData.push(chunk);\r\n                    count += (chunk as INodeBuffer).length;\r\n                    if (count === cs.length) {\r\n                        resolve(true);\r\n                    }\r\n                };\r\n\r\n                stream.subscribe(callback(this));\r\n            });\r\n\r\n            await readToEnd;\r\n        }\r\n\r\n        return {bufferArray: allData, size: count};\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}