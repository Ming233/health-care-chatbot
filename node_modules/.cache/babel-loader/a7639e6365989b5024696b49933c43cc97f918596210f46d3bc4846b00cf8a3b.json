{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar isArray_1 = require('../util/isArray');\nvar isArrayLike_1 = require('../util/isArrayLike');\nvar isPromise_1 = require('../util/isPromise');\nvar PromiseObservable_1 = require('./PromiseObservable');\nvar IteratorObservable_1 = require('./IteratorObservable');\nvar ArrayObservable_1 = require('./ArrayObservable');\nvar ArrayLikeObservable_1 = require('./ArrayLikeObservable');\nvar iterator_1 = require('../symbol/iterator');\nvar Observable_1 = require('../Observable');\nvar observeOn_1 = require('../operators/observeOn');\nvar observable_1 = require('../symbol/observable');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar FromObservable = function (_super) {\n  __extends(FromObservable, _super);\n  function FromObservable(ish, scheduler) {\n    _super.call(this, null);\n    this.ish = ish;\n    this.scheduler = scheduler;\n  }\n  /**\n   * Creates an Observable from an Array, an array-like object, a Promise, an\n   * iterable object, or an Observable-like object.\n   *\n   * <span class=\"informal\">Converts almost anything to an Observable.</span>\n   *\n   * <img src=\"./img/from.png\" width=\"100%\">\n   *\n   * Convert various other objects and data types into Observables. `from`\n   * converts a Promise or an array-like or an\n   * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n   * object into an Observable that emits the items in that promise or array or\n   * iterable. A String, in this context, is treated as an array of characters.\n   * Observable-like objects (contains a function named with the ES2015 Symbol\n   * for Observable) can also be converted through this operator.\n   *\n   * @example <caption>Converts an array to an Observable</caption>\n   * var array = [10, 20, 30];\n   * var result = Rx.Observable.from(array);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 10 20 30\n   *\n   * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\n   * function* generateDoubles(seed) {\n   *   var i = seed;\n   *   while (true) {\n   *     yield i;\n   *     i = 2 * i; // double it\n   *   }\n   * }\n   *\n   * var iterator = generateDoubles(3);\n   * var result = Rx.Observable.from(iterator).take(10);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 3 6 12 24 48 96 192 384 768 1536\n   *\n   * @see {@link create}\n   * @see {@link fromEvent}\n   * @see {@link fromEventPattern}\n   * @see {@link fromPromise}\n   *\n   * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\n   * Observable-like, an Array, an iterable or an array-like object to be\n   * converted.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * emissions of values.\n   * @return {Observable<T>} The Observable whose values are originally from the\n   * input object that was converted.\n   * @static true\n   * @name from\n   * @owner Observable\n   */\n  FromObservable.create = function (ish, scheduler) {\n    if (ish != null) {\n      if (typeof ish[observable_1.observable] === 'function') {\n        if (ish instanceof Observable_1.Observable && !scheduler) {\n          return ish;\n        }\n        return new FromObservable(ish, scheduler);\n      } else if (isArray_1.isArray(ish)) {\n        return new ArrayObservable_1.ArrayObservable(ish, scheduler);\n      } else if (isPromise_1.isPromise(ish)) {\n        return new PromiseObservable_1.PromiseObservable(ish, scheduler);\n      } else if (typeof ish[iterator_1.iterator] === 'function' || typeof ish === 'string') {\n        return new IteratorObservable_1.IteratorObservable(ish, scheduler);\n      } else if (isArrayLike_1.isArrayLike(ish)) {\n        return new ArrayLikeObservable_1.ArrayLikeObservable(ish, scheduler);\n      }\n    }\n    throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');\n  };\n  /** @deprecated internal use only */\n  FromObservable.prototype._subscribe = function (subscriber) {\n    var ish = this.ish;\n    var scheduler = this.scheduler;\n    if (scheduler == null) {\n      return ish[observable_1.observable]().subscribe(subscriber);\n    } else {\n      return ish[observable_1.observable]().subscribe(new observeOn_1.ObserveOnSubscriber(subscriber, scheduler, 0));\n    }\n  };\n  return FromObservable;\n}(Observable_1.Observable);\nexports.FromObservable = FromObservable;","map":{"version":3,"mappings":";;;;;;;;;AAAA,wBAAwB,iBAAiB,CAAC;AAC1C,4BAA4B,qBAAqB,CAAC;AAClD,0BAA0B,mBAAmB,CAAC;AAC9C,kCAAkC,qBAAqB,CAAC;AACxD,mCAAkC,sBAAsB,CAAC;AACzD,gCAAgC,mBAAmB,CAAC;AACpD,oCAAoC,uBAAuB,CAAC;AAG5D,yBAA4C,oBAAoB,CAAC;AACjE,2BAA4C,eAAe,CAAC;AAE5D,0BAAoC,wBAAwB,CAAC;AAC7D,2BAAgD,sBAAsB,CAAC;AAEvE;;;;;AAKA;EAAuCA;EACrC,wBAAoBC,GAAuB,EAAUC,SAAsB;IACzEC,kBAAM,IAAI,CAAC;IADO,QAAG,GAAHF,GAAG;IAA8B,cAAS,GAATC,SAAS;EAE9D;EAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAwDOE,qBAAM,GAAb,UAAiBH,GAAuB,EAAEC,SAAsB;IAC9D,IAAID,GAAG,IAAI,IAAI,EAAE;MACf,IAAI,OAAOA,GAAG,CAACI,uBAAiB,CAAC,KAAK,UAAU,EAAE;QAChD,IAAIJ,GAAG,YAAYK,uBAAU,IAAI,CAACJ,SAAS,EAAE;UAC3C,OAAOD,GAAG;QACZ;QACA,OAAO,IAAIG,cAAc,CAAIH,GAAG,EAAEC,SAAS,CAAC;MAC9C,CAAC,MAAM,IAAIK,iBAAO,CAACN,GAAG,CAAC,EAAE;QACvB,OAAO,IAAIO,iCAAe,CAAIP,GAAG,EAAEC,SAAS,CAAC;MAC/C,CAAC,MAAM,IAAIO,qBAAS,CAAIR,GAAG,CAAC,EAAE;QAC5B,OAAO,IAAIS,qCAAiB,CAAIT,GAAG,EAAEC,SAAS,CAAC;MACjD,CAAC,MAAM,IAAI,OAAOD,GAAG,CAACU,mBAAe,CAAC,KAAK,UAAU,IAAI,OAAOV,GAAG,KAAK,QAAQ,EAAE;QAChF,OAAO,IAAIW,uCAAkB,CAAIX,GAAG,EAAEC,SAAS,CAAC;MAClD,CAAC,MAAM,IAAIW,yBAAW,CAACZ,GAAG,CAAC,EAAE;QAC3B,OAAO,IAAIa,yCAAmB,CAACb,GAAG,EAAEC,SAAS,CAAC;MAChD;IACF;IAEA,MAAM,IAAIa,SAAS,CAAC,CAACd,GAAG,KAAK,IAAI,IAAI,OAAOA,GAAG,IAAIA,GAAG,IAAI,oBAAoB,CAAC;EACjF,CAAC;EAED;EAAqCG,mCAAU,GAAV,UAAWY,UAAyB;IACvE,IAAMf,GAAG,GAAG,IAAI,CAACA,GAAG;IACpB,IAAMC,SAAS,GAAG,IAAI,CAACA,SAAS;IAChC,IAAIA,SAAS,IAAI,IAAI,EAAE;MACrB,OAAOD,GAAG,CAACI,uBAAiB,CAAC,EAAE,CAACY,SAAS,CAACD,UAAU,CAAC;IACvD,CAAC,MAAM;MACL,OAAOf,GAAG,CAACI,uBAAiB,CAAC,EAAE,CAACY,SAAS,CAAC,IAAIC,+BAAmB,CAACF,UAAU,EAAEd,SAAS,EAAE,CAAC,CAAC,CAAC;IAC9F;EACF,CAAC;EACH,qBAAC;AAAD,CAAC,CA9FsCI,uBAAU;AAApCa,sBAAc,iBA8F1B","names":["__extends","ish","scheduler","_super","FromObservable","observable_1","Observable_1","isArray_1","ArrayObservable_1","isPromise_1","PromiseObservable_1","iterator_1","IteratorObservable_1","isArrayLike_1","ArrayLikeObservable_1","TypeError","subscriber","subscribe","observeOn_1","exports"],"sources":["C:\\Projects\\health-care-chatbot\\node_modules\\src\\observable\\FromObservable.ts"],"sourcesContent":["import { isArray } from '../util/isArray';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isPromise } from '../util/isPromise';\nimport { PromiseObservable } from './PromiseObservable';\nimport { IteratorObservable } from'./IteratorObservable';\nimport { ArrayObservable } from './ArrayObservable';\nimport { ArrayLikeObservable } from './ArrayLikeObservable';\n\nimport { IScheduler } from '../Scheduler';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { ObserveOnSubscriber } from '../operators/observeOn';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromObservable<T> extends Observable<T> {\n  constructor(private ish: ObservableInput<T>, private scheduler?: IScheduler) {\n    super(null);\n  }\n\n  static create<T>(ish: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\n  static create<T, R>(ish: ArrayLike<T>, scheduler?: IScheduler): Observable<R>;\n\n  /**\n   * Creates an Observable from an Array, an array-like object, a Promise, an\n   * iterable object, or an Observable-like object.\n   *\n   * <span class=\"informal\">Converts almost anything to an Observable.</span>\n   *\n   * <img src=\"./img/from.png\" width=\"100%\">\n   *\n   * Convert various other objects and data types into Observables. `from`\n   * converts a Promise or an array-like or an\n   * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n   * object into an Observable that emits the items in that promise or array or\n   * iterable. A String, in this context, is treated as an array of characters.\n   * Observable-like objects (contains a function named with the ES2015 Symbol\n   * for Observable) can also be converted through this operator.\n   *\n   * @example <caption>Converts an array to an Observable</caption>\n   * var array = [10, 20, 30];\n   * var result = Rx.Observable.from(array);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 10 20 30\n   *\n   * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\n   * function* generateDoubles(seed) {\n   *   var i = seed;\n   *   while (true) {\n   *     yield i;\n   *     i = 2 * i; // double it\n   *   }\n   * }\n   *\n   * var iterator = generateDoubles(3);\n   * var result = Rx.Observable.from(iterator).take(10);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 3 6 12 24 48 96 192 384 768 1536\n   *\n   * @see {@link create}\n   * @see {@link fromEvent}\n   * @see {@link fromEventPattern}\n   * @see {@link fromPromise}\n   *\n   * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\n   * Observable-like, an Array, an iterable or an array-like object to be\n   * converted.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * emissions of values.\n   * @return {Observable<T>} The Observable whose values are originally from the\n   * input object that was converted.\n   * @static true\n   * @name from\n   * @owner Observable\n   */\n  static create<T>(ish: ObservableInput<T>, scheduler?: IScheduler): Observable<T> {\n    if (ish != null) {\n      if (typeof ish[Symbol_observable] === 'function') {\n        if (ish instanceof Observable && !scheduler) {\n          return ish;\n        }\n        return new FromObservable<T>(ish, scheduler);\n      } else if (isArray(ish)) {\n        return new ArrayObservable<T>(ish, scheduler);\n      } else if (isPromise<T>(ish)) {\n        return new PromiseObservable<T>(ish, scheduler);\n      } else if (typeof ish[Symbol_iterator] === 'function' || typeof ish === 'string') {\n        return new IteratorObservable<T>(ish, scheduler);\n      } else if (isArrayLike(ish)) {\n        return new ArrayLikeObservable(ish, scheduler);\n      }\n    }\n\n    throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>) {\n    const ish = this.ish;\n    const scheduler = this.scheduler;\n    if (scheduler == null) {\n      return ish[Symbol_observable]().subscribe(subscriber);\n    } else {\n      return ish[Symbol_observable]().subscribe(new ObserveOnSubscriber(subscriber, scheduler, 0));\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}