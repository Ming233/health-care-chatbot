{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar payloadAssemblerManager_1 = require(\"./payloads/payloadAssemblerManager\");\nvar sendOperations_1 = require(\"./payloads/sendOperations\");\nvar streamManager_1 = require(\"./payloads/streamManager\");\nvar protocol_base_1 = require(\"./utilities/protocol-base\");\nvar ProtocolAdapter = /** @class */function () {\n  /// <summary>\n  /// Creates a new instance of the protocol adapter class.\n  /// </summary>\n  /// <param name=\"requestHandler\">The handler that will process incoming requests.</param>\n  /// <param name=\"requestManager\">The manager that will process outgoing requests.</param>\n  /// <param name=\"sender\">The sender for use with outgoing requests.</param>\n  /// <param name=\"receiver\">The receiver for use with incoming requests.</param>\n  function ProtocolAdapter(requestHandler, requestManager, sender, receiver) {\n    var _this = this;\n    this.requestHandler = requestHandler;\n    this.requestManager = requestManager;\n    this.payloadSender = sender;\n    this.payloadReceiver = receiver;\n    this.sendOperations = new sendOperations_1.SendOperations(this.payloadSender);\n    this.streamManager = new streamManager_1.StreamManager(this.onCancelStream);\n    this.assemblerManager = new payloadAssemblerManager_1.PayloadAssemblerManager(this.streamManager, function (id, response) {\n      return _this.onReceiveResponse(id, response);\n    }, function (id, request) {\n      return _this.onReceiveRequest(id, request);\n    });\n    this.payloadReceiver.subscribe(function (header) {\n      return _this.assemblerManager.getPayloadStream(header);\n    }, function (header, contentStream, contentLength) {\n      return _this.assemblerManager.onReceive(header, contentStream, contentLength);\n    });\n  }\n  /// <summary>\n  /// Sends a request over the attached request manager.\n  /// </summary>\n  /// <param name=\"request\">The outgoing request to send.</param>\n  /// <param name=\"cancellationToken\">Optional cancellation token.</param>\n  ProtocolAdapter.prototype.sendRequest = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var requestId;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            requestId = protocol_base_1.generateGuid();\n            return [4 /*yield*/, this.sendOperations.sendRequest(requestId, request)];\n          case 1:\n            _a.sent();\n            return [2 /*return*/, this.requestManager.getResponse(requestId)];\n        }\n      });\n    });\n  };\n  /// <summary>\n  /// Executes the receive pipeline when a request comes in.\n  /// </summary>\n  /// <param name=\"id\">The id the resources created for the response will be assigned.</param>\n  /// <param name=\"request\">The incoming request to process.</param>\n  ProtocolAdapter.prototype.onReceiveRequest = function (id, request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var response;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.requestHandler) return [3 /*break*/, 3];\n            return [4 /*yield*/, this.requestHandler.processRequest(request)];\n          case 1:\n            response = _a.sent();\n            if (!response) return [3 /*break*/, 3];\n            return [4 /*yield*/, this.sendOperations.sendResponse(id, response)];\n          case 2:\n            _a.sent();\n            _a.label = 3;\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /// <summary>\n  /// Executes the receive pipeline when a response comes in.\n  /// </summary>\n  /// <param name=\"id\">The id the resources created for the response will be assigned.</param>\n  /// <param name=\"response\">The incoming response to process.</param>\n  ProtocolAdapter.prototype.onReceiveResponse = function (id, response) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.requestManager.signalResponse(id, response)];\n          case 1:\n            _a.sent();\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /// <summary>\n  /// Executes the receive pipeline when a cancellation comes in.\n  /// </summary>\n  /// <param name=\"contentStreamAssembler\">\n  /// The payload assembler processing the incoming data that this\n  /// cancellation request targets.\n  /// </param>\n  ProtocolAdapter.prototype.onCancelStream = function (contentStreamAssembler) {\n    this.sendOperations.sendCancelStream(contentStreamAssembler.id).catch();\n  };\n  return ProtocolAdapter;\n}();\nexports.ProtocolAdapter = ProtocolAdapter;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA;AAEA;AACA;AAMA;AAIA;EASI;EACA;EACA;EACA;EACA;EACA;EACA;EACA,yBAAmBA,cAA8B,EAAEC,cAA8B,EAAEC,MAAqB,EAAEC,QAAyB;IAAnI;IACI,IAAI,CAACH,cAAc,GAAGA,cAAc;IACpC,IAAI,CAACC,cAAc,GAAGA,cAAc;IACpC,IAAI,CAACG,aAAa,GAAGF,MAAM;IAC3B,IAAI,CAACG,eAAe,GAAGF,QAAQ;IAC/B,IAAI,CAACG,cAAc,GAAG,IAAIC,+BAAc,CAAC,IAAI,CAACH,aAAa,CAAC;IAC5D,IAAI,CAACI,aAAa,GAAG,IAAIC,6BAAa,CAAC,IAAI,CAACC,cAAc,CAAC;IAC3D,IAAI,CAACC,gBAAgB,GAAG,IAAIC,iDAAuB,CAAC,IAAI,CAACJ,aAAa,EAAE,UAACK,EAAU,EAAEC,QAA0B;MAAoB,YAAI,CAACC,iBAAiB,CAACF,EAAE,EAAEC,QAAQ,CAAC;IAApC,CAAoC,EAAC,UAACD,EAAU,EAAEG,OAAwB;MAAoB,YAAI,CAACC,gBAAgB,CAACJ,EAAE,EAAEG,OAAO,CAAC;IAAlC,CAAkC,CAAC;IACpQ,IAAI,CAACX,eAAe,CAACa,SAAS,CAAC,UAACC,MAAe;MAAyB,YAAI,CAACR,gBAAgB,CAACS,gBAAgB,CAACD,MAAM,CAAC;IAA9C,CAA8C,EAAC,UAACA,MAAe,EAAEE,aAAiC,EAAEC,aAAqB;MAAW,YAAI,CAACX,gBAAgB,CAACY,SAAS,CAACJ,MAAM,EAAEE,aAAa,EAAEC,aAAa,CAAC;IAArE,CAAqE,CAAC;EACtR;EAEA;EACA;EACA;EACA;EACA;EACaE,qCAAW,GAAxB,UAAyBR,OAAyB;;;;;;YAC1CS,SAAS,GAAWC,4BAAY,EAAE;YACtC,qBAAM,IAAI,CAACpB,cAAc,CAACqB,WAAW,CAACF,SAAS,EAAET,OAAO,CAAC;;YAAzDY,SAAyD;YAEzD,sBAAO,IAAI,CAAC3B,cAAc,CAAC4B,WAAW,CAACJ,SAAS,CAAC;QAAC;;;GACrD;EAED;EACA;EACA;EACA;EACA;EACaD,0CAAgB,GAA7B,UAA8BX,EAAU,EAAEG,OAAwB;;;;;;iBAC1D,IAAI,CAAChB,cAAc,EAAnB;YACe,qBAAM,IAAI,CAACA,cAAc,CAAC8B,cAAc,CAACd,OAAO,CAAC;;YAA5DF,QAAQ,GAAGc,SAAiD;iBAE5Dd,QAAQ,EAAR;YACA,qBAAM,IAAI,CAACR,cAAc,CAACyB,YAAY,CAAClB,EAAE,EAAEC,QAAQ,CAAC;;YAApDc,SAAoD;;;;;;;GAG/D;EAED;EACA;EACA;EACA;EACA;EACaJ,2CAAiB,GAA9B,UAA+BX,EAAU,EAAEC,QAA0B;;;;;YACjE,qBAAM,IAAI,CAACb,cAAc,CAAC+B,cAAc,CAACnB,EAAE,EAAEC,QAAQ,CAAC;;YAAtDc,SAAsD;;;;;GACzD;EAED;EACA;EACA;EACA;EACA;EACA;EACA;EACOJ,wCAAc,GAArB,UAAsBS,sBAAwC;IAC1D,IAAI,CAAC3B,cAAc,CAAC4B,gBAAgB,CAACD,sBAAsB,CAACpB,EAAE,CAAC,CAC1DsB,KAAK,EAAE;EAChB,CAAC;EACL,sBAAC;AAAD,CAAC,EA1ED;AAAaC","names":["requestHandler","requestManager","sender","receiver","payloadSender","payloadReceiver","sendOperations","sendOperations_1","streamManager","streamManager_1","onCancelStream","assemblerManager","payloadAssemblerManager_1","id","response","onReceiveResponse","request","onReceiveRequest","subscribe","header","getPayloadStream","contentStream","contentLength","onReceive","ProtocolAdapter","requestId","protocol_base_1","sendRequest","_a","getResponse","processRequest","sendResponse","signalResponse","contentStreamAssembler","sendCancelStream","catch","exports"],"sources":["C:\\Projects\\health-care-chatbot\\node_modules\\botframework-streaming\\src\\protocolAdapter.ts"],"sourcesContent":["/**\r\n * @module botframework-streaming\r\n */\r\n/**\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nimport { PayloadAssembler } from './assemblers/payloadAssembler';\r\nimport { PayloadAssemblerManager } from './payloads/payloadAssemblerManager';\r\nimport { RequestManager } from './payloads/requestManager';\r\nimport { SendOperations } from './payloads/sendOperations';\r\nimport { StreamManager } from './payloads/streamManager';\r\nimport { PayloadReceiver } from './payloadTransport/payloadReceiver';\r\nimport { PayloadSender } from './payloadTransport/payloadSender';\r\nimport { RequestHandler } from './requestHandler';\r\nimport { SubscribableStream } from './subscribableStream';\r\nimport { StreamingRequest } from './streamingRequest';\r\nimport { generateGuid } from './utilities/protocol-base';\r\nimport { IReceiveResponse, IReceiveRequest } from './interfaces';\r\nimport { IHeader } from './interfaces/IHeader';\r\n\r\nexport class ProtocolAdapter {\r\n    private readonly requestHandler: RequestHandler;\r\n    private readonly payloadSender: PayloadSender;\r\n    private readonly payloadReceiver: PayloadReceiver;\r\n    private readonly requestManager: RequestManager;\r\n    private readonly sendOperations: SendOperations;\r\n    private readonly streamManager: StreamManager;\r\n    private readonly assemblerManager: PayloadAssemblerManager;\r\n\r\n    /// <summary>\r\n    /// Creates a new instance of the protocol adapter class.\r\n    /// </summary>\r\n    /// <param name=\"requestHandler\">The handler that will process incoming requests.</param>\r\n    /// <param name=\"requestManager\">The manager that will process outgoing requests.</param>\r\n    /// <param name=\"sender\">The sender for use with outgoing requests.</param>\r\n    /// <param name=\"receiver\">The receiver for use with incoming requests.</param>\r\n    public constructor(requestHandler: RequestHandler, requestManager: RequestManager, sender: PayloadSender, receiver: PayloadReceiver) {\r\n        this.requestHandler = requestHandler;\r\n        this.requestManager = requestManager;\r\n        this.payloadSender = sender;\r\n        this.payloadReceiver = receiver;\r\n        this.sendOperations = new SendOperations(this.payloadSender);\r\n        this.streamManager = new StreamManager(this.onCancelStream);\r\n        this.assemblerManager = new PayloadAssemblerManager(this.streamManager, (id: string, response: IReceiveResponse): Promise<void> => this.onReceiveResponse(id, response),(id: string, request: IReceiveRequest): Promise<void> => this.onReceiveRequest(id, request));\r\n        this.payloadReceiver.subscribe((header: IHeader): SubscribableStream => this.assemblerManager.getPayloadStream(header),(header: IHeader, contentStream: SubscribableStream, contentLength: number): void => this.assemblerManager.onReceive(header, contentStream, contentLength));\r\n    }\r\n\r\n    /// <summary>\r\n    /// Sends a request over the attached request manager.\r\n    /// </summary>\r\n    /// <param name=\"request\">The outgoing request to send.</param>\r\n    /// <param name=\"cancellationToken\">Optional cancellation token.</param>\r\n    public async sendRequest(request: StreamingRequest): Promise<IReceiveResponse> {\r\n        let requestId: string = generateGuid();\r\n        await this.sendOperations.sendRequest(requestId, request);\r\n\r\n        return this.requestManager.getResponse(requestId);\r\n    }\r\n\r\n    /// <summary>\r\n    /// Executes the receive pipeline when a request comes in.\r\n    /// </summary>\r\n    /// <param name=\"id\">The id the resources created for the response will be assigned.</param>\r\n    /// <param name=\"request\">The incoming request to process.</param>\r\n    public async onReceiveRequest(id: string, request: IReceiveRequest): Promise<void> {\r\n        if (this.requestHandler) {\r\n            let response = await this.requestHandler.processRequest(request);\r\n\r\n            if (response) {\r\n                await this.sendOperations.sendResponse(id, response);\r\n            }\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// Executes the receive pipeline when a response comes in.\r\n    /// </summary>\r\n    /// <param name=\"id\">The id the resources created for the response will be assigned.</param>\r\n    /// <param name=\"response\">The incoming response to process.</param>\r\n    public async onReceiveResponse(id: string, response: IReceiveResponse): Promise<void> {\r\n        await this.requestManager.signalResponse(id, response);\r\n    }\r\n\r\n    /// <summary>\r\n    /// Executes the receive pipeline when a cancellation comes in.\r\n    /// </summary>\r\n    /// <param name=\"contentStreamAssembler\">\r\n    /// The payload assembler processing the incoming data that this\r\n    /// cancellation request targets.\r\n    /// </param>\r\n    public onCancelStream(contentStreamAssembler: PayloadAssembler): void {\r\n        this.sendOperations.sendCancelStream(contentStreamAssembler.id)\r\n            .catch();\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}