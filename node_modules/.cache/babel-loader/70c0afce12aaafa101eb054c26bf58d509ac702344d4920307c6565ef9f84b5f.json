{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar isNumeric_1 = require('../util/isNumeric');\nvar Observable_1 = require('../Observable');\nvar async_1 = require('../scheduler/async');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar IntervalObservable = function (_super) {\n  __extends(IntervalObservable, _super);\n  function IntervalObservable(period, scheduler) {\n    if (period === void 0) {\n      period = 0;\n    }\n    if (scheduler === void 0) {\n      scheduler = async_1.async;\n    }\n    _super.call(this);\n    this.period = period;\n    this.scheduler = scheduler;\n    if (!isNumeric_1.isNumeric(period) || period < 0) {\n      this.period = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      this.scheduler = async_1.async;\n    }\n  }\n  /**\n   * Creates an Observable that emits sequential numbers every specified\n   * interval of time, on a specified IScheduler.\n   *\n   * <span class=\"informal\">Emits incremental numbers periodically in time.\n   * </span>\n   *\n   * <img src=\"./img/interval.png\" width=\"100%\">\n   *\n   * `interval` returns an Observable that emits an infinite sequence of\n   * ascending integers, with a constant interval of time of your choosing\n   * between those emissions. The first emission is not sent immediately, but\n   * only after the first period has passed. By default, this operator uses the\n   * `async` IScheduler to provide a notion of time, but you may pass any\n   * IScheduler to it.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms)</caption>\n   * var numbers = Rx.Observable.interval(1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link timer}\n   * @see {@link delay}\n   *\n   * @param {number} [period=0] The interval size in milliseconds (by default)\n   * or the time unit determined by the scheduler's clock.\n   * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a sequential number each time\n   * interval.\n   * @static true\n   * @name interval\n   * @owner Observable\n   */\n  IntervalObservable.create = function (period, scheduler) {\n    if (period === void 0) {\n      period = 0;\n    }\n    if (scheduler === void 0) {\n      scheduler = async_1.async;\n    }\n    return new IntervalObservable(period, scheduler);\n  };\n  IntervalObservable.dispatch = function (state) {\n    var index = state.index,\n      subscriber = state.subscriber,\n      period = state.period;\n    subscriber.next(index);\n    if (subscriber.closed) {\n      return;\n    }\n    state.index += 1;\n    this.schedule(state, period);\n  };\n  /** @deprecated internal use only */\n  IntervalObservable.prototype._subscribe = function (subscriber) {\n    var index = 0;\n    var period = this.period;\n    var scheduler = this.scheduler;\n    subscriber.add(scheduler.schedule(IntervalObservable.dispatch, period, {\n      index: index,\n      subscriber: subscriber,\n      period: period\n    }));\n  };\n  return IntervalObservable;\n}(Observable_1.Observable);\nexports.IntervalObservable = IntervalObservable;","map":{"version":3,"mappings":";;;;;;;;;AACA,0BAA0B,mBAAmB,CAAC;AAE9C,2BAA2B,eAAe,CAAC;AAC3C,sBAAsB,oBAAoB,CAAC;AAE3C;;;;;AAKA;EAAwCA;EAqDtC,4BAAoBC,MAAkB,EAClBC,SAA6B;IADrC,uBAA0B;MAA1BD,UAA0B;IAAA;IAC1B,0BAAqC;MAArCC,yBAAqC;IAAA;IAC/CC,iBAAO;IAFW,WAAM,GAANF,MAAM;IACN,cAAS,GAATC,SAAS;IAE3B,IAAI,CAACE,qBAAS,CAACH,MAAM,CAAC,IAAIA,MAAM,GAAG,CAAC,EAAE;MACpC,IAAI,CAACA,MAAM,GAAG,CAAC;IACjB;IACA,IAAI,CAACC,SAAS,IAAI,OAAOA,SAAS,CAACG,QAAQ,KAAK,UAAU,EAAE;MAC1D,IAAI,CAACH,SAAS,GAAGI,aAAK;IACxB;EACF;EA7DA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAiCOC,yBAAM,GAAb,UAAcN,MAAkB,EAClBC,SAA6B;IAD7B,uBAAkB;MAAlBD,UAAkB;IAAA;IAClB,0BAA6B;MAA7BC,yBAA6B;IAAA;IACzC,OAAO,IAAIK,kBAAkB,CAACN,MAAM,EAAEC,SAAS,CAAC;EAClD,CAAC;EAEMK,2BAAQ,GAAf,UAAgBC,KAAU;IAChB,uBAAK;MAAEC,6BAAU;MAAER,qBAAM;IAEjCQ,UAAU,CAACC,IAAI,CAACC,KAAK,CAAC;IAEtB,IAAIF,UAAU,CAACG,MAAM,EAAE;MACrB;IACF;IAEAJ,KAAK,CAACG,KAAK,IAAI,CAAC;IAET,IAAK,CAACN,QAAQ,CAACG,KAAK,EAAEP,MAAM,CAAC;EACtC,CAAC;EAaD;EAAqCM,uCAAU,GAAV,UAAWE,UAA8B;IAC5E,IAAME,KAAK,GAAG,CAAC;IACf,IAAMV,MAAM,GAAG,IAAI,CAACA,MAAM;IAC1B,IAAMC,SAAS,GAAG,IAAI,CAACA,SAAS;IAEhCO,UAAU,CAACI,GAAG,CAACX,SAAS,CAACG,QAAQ,CAACE,kBAAkB,CAACO,QAAQ,EAAEb,MAAM,EAAE;MACrEU,YAAK;MAAEF,sBAAU;MAAER;KACpB,CAAC,CAAC;EACL,CAAC;EACH,yBAAC;AAAD,CAAC,CAzEuCc,uBAAU;AAArCC,0BAAkB,qBAyE9B","names":["__extends","period","scheduler","_super","isNumeric_1","schedule","async_1","IntervalObservable","state","subscriber","next","index","closed","add","dispatch","Observable_1","exports"],"sources":["C:\\Projects\\health-care-chatbot\\node_modules\\src\\observable\\IntervalObservable.ts"],"sourcesContent":["import { Subscriber } from '../Subscriber';\nimport { isNumeric } from '../util/isNumeric';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IntervalObservable extends Observable<number> {\n  /**\n   * Creates an Observable that emits sequential numbers every specified\n   * interval of time, on a specified IScheduler.\n   *\n   * <span class=\"informal\">Emits incremental numbers periodically in time.\n   * </span>\n   *\n   * <img src=\"./img/interval.png\" width=\"100%\">\n   *\n   * `interval` returns an Observable that emits an infinite sequence of\n   * ascending integers, with a constant interval of time of your choosing\n   * between those emissions. The first emission is not sent immediately, but\n   * only after the first period has passed. By default, this operator uses the\n   * `async` IScheduler to provide a notion of time, but you may pass any\n   * IScheduler to it.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms)</caption>\n   * var numbers = Rx.Observable.interval(1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link timer}\n   * @see {@link delay}\n   *\n   * @param {number} [period=0] The interval size in milliseconds (by default)\n   * or the time unit determined by the scheduler's clock.\n   * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a sequential number each time\n   * interval.\n   * @static true\n   * @name interval\n   * @owner Observable\n   */\n  static create(period: number = 0,\n                scheduler: IScheduler = async): Observable<number> {\n    return new IntervalObservable(period, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { index, subscriber, period } = state;\n\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index += 1;\n\n    (<any> this).schedule(state, period);\n  }\n\n  constructor(private period: number = 0,\n              private scheduler: IScheduler = async) {\n    super();\n    if (!isNumeric(period) || period < 0) {\n      this.period = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      this.scheduler = async;\n    }\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<number>) {\n    const index = 0;\n    const period = this.period;\n    const scheduler = this.scheduler;\n\n    subscriber.add(scheduler.schedule(IntervalObservable.dispatch, period, {\n      index, subscriber, period\n    }));\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}