{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * @module botframework-streaming\n */\n/**\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nvar httpContentStream_1 = require(\"./httpContentStream\");\nvar subscribableStream_1 = require(\"./subscribableStream\");\nvar StreamingRequest = /** @class */function () {\n  function StreamingRequest() {\n    /**\n     * List of associated streams.\n     */\n    this.streams = [];\n  }\n  /**\n   * Creates a streaming request with the passed in method, path, and body.\n   *\n   * @param method The HTTP verb to use for this request.\n   * @param path Optional path where the resource can be found on the remote server.\n   * @param body Optional body to send to the remote server.\n   * @returns On success returns a streaming request with appropriate status code and body.\n   */\n  StreamingRequest.create = function (method, path, body) {\n    var request = new StreamingRequest();\n    request.verb = method;\n    request.path = path;\n    if (body) {\n      request.setBody(body);\n    }\n    return request;\n  };\n  /**\n   * Adds a new stream attachment to this streaming request.\n   *\n   * @param content The Http content to include in the new stream attachment.\n   */\n  StreamingRequest.prototype.addStream = function (content) {\n    if (!content) {\n      throw new Error('Argument Undefined Exception: content undefined.');\n    }\n    this.streams.push(new httpContentStream_1.HttpContentStream(content));\n  };\n  /**\n   * Sets the contents of the body of this streamingRequest.\n   *\n   * @param body The JSON text to write to the body of the streamingRequest.\n   */\n  StreamingRequest.prototype.setBody = function (body) {\n    if (typeof body === 'string') {\n      var stream = new subscribableStream_1.SubscribableStream();\n      stream.write(body, 'utf8');\n      this.addStream(new httpContentStream_1.HttpContent({\n        type: 'application/json; charset=utf-8',\n        contentLength: stream.length\n      }, stream));\n    } else if (typeof body === 'object') {\n      this.addStream(body);\n    }\n  };\n  return StreamingRequest;\n}();\nexports.StreamingRequest = StreamingRequest;","map":{"version":3,"mappings":";;;;;AAAA;;;AAGA;;;;AAIA;AACA;AAEA;EAAA;IAYI;;;IAGO,YAAO,GAAwB,EAAE;EAoD5C;EAlDI;;;;;;;;EAQcA,uBAAM,GAApB,UAAqBC,MAAc,EAAEC,IAAa,EAAEC,IAAkB;IAClE,IAAIC,OAAO,GAAG,IAAIJ,gBAAgB,EAAE;IACpCI,OAAO,CAACC,IAAI,GAAGJ,MAAM;IACrBG,OAAO,CAACF,IAAI,GAAGA,IAAI;IACnB,IAAIC,IAAI,EAAE;MACNC,OAAO,CAACE,OAAO,CAACH,IAAI,CAAC;;IAGzB,OAAOC,OAAO;EAClB,CAAC;EAED;;;;;EAKOJ,oCAAS,GAAhB,UAAiBO,OAAoB;IACjC,IAAI,CAACA,OAAO,EAAE;MACV,MAAM,IAAIC,KAAK,CAAC,kDAAkD,CAAC;;IAGvE,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,IAAIC,qCAAiB,CAACJ,OAAO,CAAC,CAAC;EACrD,CAAC;EAED;;;;;EAKOP,kCAAO,GAAd,UAAeG,IAAS;IACpB,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;MAC1B,IAAIS,MAAM,GAAG,IAAIC,uCAAkB,EAAE;MACrCD,MAAM,CAACE,KAAK,CAACX,IAAI,EAAE,MAAM,CAAC;MAC1B,IAAI,CAACY,SAAS,CAAC,IAAIJ,+BAAW,CAAC;QAC3BK,IAAI,EAAE,iCAAiC;QACvCC,aAAa,EAAEL,MAAM,CAACM;OACzB,EACDN,MAAM,CAAC,CAAC;KACX,MAAM,IAAI,OAAOT,IAAI,KAAK,QAAQ,EAAE;MACjC,IAAI,CAACY,SAAS,CAACZ,IAAI,CAAC;;EAE5B,CAAC;EACL,uBAAC;AAAD,CAAC,EAnED;AAAagB","names":["StreamingRequest","method","path","body","request","verb","setBody","content","Error","streams","push","httpContentStream_1","stream","subscribableStream_1","write","addStream","type","contentLength","length","exports"],"sources":["C:\\Projects\\health-care-chatbot\\node_modules\\botframework-streaming\\src\\streamingRequest.ts"],"sourcesContent":["/**\r\n * @module botframework-streaming\r\n */\r\n/**\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nimport { HttpContent, HttpContentStream } from './httpContentStream';\r\nimport { SubscribableStream } from './subscribableStream';\r\n\r\nexport class StreamingRequest {\r\n\r\n    /**\r\n     * Request verb, null on responses.\r\n     */\r\n    public verb: string;\r\n\r\n    /**\r\n     * Request path; null on responses.\r\n     */\r\n    public path: string;\r\n\r\n    /**\r\n     * List of associated streams.\r\n     */\r\n    public streams: HttpContentStream[] = [];\r\n\r\n    /**\r\n     * Creates a streaming request with the passed in method, path, and body.\r\n     *\r\n     * @param method The HTTP verb to use for this request.\r\n     * @param path Optional path where the resource can be found on the remote server.\r\n     * @param body Optional body to send to the remote server.\r\n     * @returns On success returns a streaming request with appropriate status code and body.\r\n     */\r\n    public static create(method: string, path?: string, body?: HttpContent): StreamingRequest {\r\n        let request = new StreamingRequest();\r\n        request.verb = method;\r\n        request.path = path;\r\n        if (body) {\r\n            request.setBody(body);\r\n        }\r\n\r\n        return request;\r\n    }\r\n\r\n    /**\r\n     * Adds a new stream attachment to this streaming request.\r\n     *\r\n     * @param content The Http content to include in the new stream attachment.\r\n     */\r\n    public addStream(content: HttpContent): void {\r\n        if (!content) {\r\n            throw new Error('Argument Undefined Exception: content undefined.');\r\n        }\r\n\r\n        this.streams.push(new HttpContentStream(content));\r\n    }\r\n\r\n    /**\r\n     * Sets the contents of the body of this streamingRequest.\r\n     *\r\n     * @param body The JSON text to write to the body of the streamingRequest.\r\n     */\r\n    public setBody(body: any): void {\r\n        if (typeof body === 'string') {\r\n            let stream = new SubscribableStream();\r\n            stream.write(body, 'utf8');\r\n            this.addStream(new HttpContent({\r\n                type: 'application/json; charset=utf-8',\r\n                contentLength: stream.length\r\n            },\r\n            stream));\r\n        } else if (typeof body === 'object') {\r\n            this.addStream(body);\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}