{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar payloadAssembler_1 = require(\"../assemblers/payloadAssembler\");\n/**\n * Orchestrates and manages streams.\n */\nvar StreamManager = /** @class */function () {\n  function StreamManager(onCancelStream) {\n    this.activeAssemblers = [];\n    this.onCancelStream = onCancelStream;\n  }\n  StreamManager.prototype.getPayloadAssembler = function (id) {\n    if (!this.activeAssemblers[id]) {\n      // A new id has come in, kick off the process of tracking it.\n      var assembler = new payloadAssembler_1.PayloadAssembler(this, {\n        id: id\n      });\n      this.activeAssemblers[id] = assembler;\n      return assembler;\n    } else {\n      return this.activeAssemblers[id];\n    }\n  };\n  StreamManager.prototype.getPayloadStream = function (header) {\n    var assembler = this.getPayloadAssembler(header.id);\n    return assembler.getPayloadStream();\n  };\n  StreamManager.prototype.onReceive = function (header, contentStream, contentLength) {\n    if (!this.activeAssemblers[header.id]) {\n      return;\n    }\n    this.activeAssemblers[header.id].onReceive(header, contentStream, contentLength);\n  };\n  StreamManager.prototype.closeStream = function (id) {\n    if (!this.activeAssemblers[id]) {\n      return;\n    } else {\n      var assembler = this.activeAssemblers[id];\n      this.activeAssemblers.splice(this.activeAssemblers.indexOf(id), 1);\n      var targetStream = assembler.getPayloadStream();\n      if (assembler.contentLength && targetStream.length < assembler.contentLength || !assembler.end) {\n        this.onCancelStream(assembler);\n      }\n    }\n  };\n  return StreamManager;\n}();\nexports.StreamManager = StreamManager;","map":{"version":3,"mappings":";;;;;AASA;AAEA;;;AAGA;EAII,uBAAmBA,cAAwB;IAH1B,qBAAgB,GAAG,EAAE;IAIlC,IAAI,CAACA,cAAc,GAAGA,cAAc;EACxC;EAEOC,2CAAmB,GAA1B,UAA2BC,EAAU;IACjC,IAAI,CAAC,IAAI,CAACC,gBAAgB,CAACD,EAAE,CAAC,EAAE;MAC5B;MACA,IAAIE,SAAS,GAAG,IAAIC,mCAAgB,CAAC,IAAI,EAAE;QAACH,EAAE,EAAEA;MAAE,CAAC,CAAC;MACpD,IAAI,CAACC,gBAAgB,CAACD,EAAE,CAAC,GAAGE,SAAS;MAErC,OAAOA,SAAS;KACnB,MAAM;MAEH,OAAO,IAAI,CAACD,gBAAgB,CAACD,EAAE,CAAC;;EAExC,CAAC;EAEMD,wCAAgB,GAAvB,UAAwBK,MAAe;IACnC,IAAIF,SAAS,GAAG,IAAI,CAACG,mBAAmB,CAACD,MAAM,CAACJ,EAAE,CAAC;IAEnD,OAAOE,SAAS,CAACI,gBAAgB,EAAE;EACvC,CAAC;EAEMP,iCAAS,GAAhB,UAAiBK,MAAe,EAAEG,aAAiC,EAAEC,aAAqB;IACtF,IAAI,CAAC,IAAI,CAACP,gBAAgB,CAACG,MAAM,CAACJ,EAAE,CAAC,EAAE;MACnC;;IAEJ,IAAI,CAACC,gBAAgB,CAACG,MAAM,CAACJ,EAAE,CAAC,CAACS,SAAS,CAACL,MAAM,EAAEG,aAAa,EAAEC,aAAa,CAAC;EACpF,CAAC;EAEMT,mCAAW,GAAlB,UAAmBC,EAAU;IACzB,IAAI,CAAC,IAAI,CAACC,gBAAgB,CAACD,EAAE,CAAC,EAAE;MAC5B;KACH,MAAM;MACH,IAAIE,SAAS,GAAqB,IAAI,CAACD,gBAAgB,CAACD,EAAE,CAAC;MAC3D,IAAI,CAACC,gBAAgB,CAACS,MAAM,CAAC,IAAI,CAACT,gBAAgB,CAACU,OAAO,CAACX,EAAE,CAAC,EAAE,CAAC,CAAC;MAClE,IAAIY,YAAY,GAAGV,SAAS,CAACI,gBAAgB,EAAE;MAC/C,IAAKJ,SAAS,CAACM,aAAa,IAAII,YAAY,CAACC,MAAM,GAAGX,SAAS,CAACM,aAAa,IAAK,CAACN,SAAS,CAACY,GAAG,EAAE;QAC9F,IAAI,CAAChB,cAAc,CAACI,SAAS,CAAC;;;EAG1C,CAAC;EACL,oBAAC;AAAD,CAAC,EA9CD;AAAaa","names":["onCancelStream","StreamManager","id","activeAssemblers","assembler","payloadAssembler_1","header","getPayloadAssembler","getPayloadStream","contentStream","contentLength","onReceive","splice","indexOf","targetStream","length","end","exports"],"sources":["C:\\Projects\\health-care-chatbot\\node_modules\\botframework-streaming\\src\\payloads\\streamManager.ts"],"sourcesContent":["/**\r\n * @module botframework-streaming\r\n */\r\n/**\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nimport { IHeader } from '../interfaces/IHeader';\r\nimport { SubscribableStream } from '../subscribableStream';\r\nimport { PayloadAssembler } from '../assemblers/payloadAssembler';\r\n\r\n/**\r\n * Orchestrates and manages streams.\r\n */\r\nexport class StreamManager {\r\n    private readonly activeAssemblers = [];\r\n    private readonly onCancelStream: Function;\r\n\r\n    public constructor(onCancelStream: Function) {\r\n        this.onCancelStream = onCancelStream;\r\n    }\r\n\r\n    public getPayloadAssembler(id: string): PayloadAssembler {\r\n        if (!this.activeAssemblers[id]) {\r\n            // A new id has come in, kick off the process of tracking it.\r\n            let assembler = new PayloadAssembler(this, {id: id});\r\n            this.activeAssemblers[id] = assembler;\r\n\r\n            return assembler;\r\n        } else {\r\n\r\n            return this.activeAssemblers[id];\r\n        }\r\n    }\r\n\r\n    public getPayloadStream(header: IHeader): SubscribableStream {\r\n        let assembler = this.getPayloadAssembler(header.id);\r\n\r\n        return assembler.getPayloadStream();\r\n    }\r\n\r\n    public onReceive(header: IHeader, contentStream: SubscribableStream, contentLength: number): void {\r\n        if (!this.activeAssemblers[header.id]) {\r\n            return;\r\n        }\r\n        this.activeAssemblers[header.id].onReceive(header, contentStream, contentLength);\r\n    }\r\n\r\n    public closeStream(id: string): void {\r\n        if (!this.activeAssemblers[id]) {\r\n            return;\r\n        } else {\r\n            let assembler: PayloadAssembler = this.activeAssemblers[id];\r\n            this.activeAssemblers.splice(this.activeAssemblers.indexOf(id), 1);\r\n            let targetStream = assembler.getPayloadStream();\r\n            if ((assembler.contentLength && targetStream.length < assembler.contentLength) || !assembler.end) {\r\n                this.onCancelStream(assembler);\r\n            }\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}