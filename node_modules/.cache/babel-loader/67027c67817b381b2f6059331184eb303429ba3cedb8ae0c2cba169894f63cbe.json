{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar root_1 = require('../util/root');\nvar Action_1 = require('./Action');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AsyncAction = function (_super) {\n  __extends(AsyncAction, _super);\n  function AsyncAction(scheduler, work) {\n    _super.call(this, scheduler, work);\n    this.scheduler = scheduler;\n    this.work = work;\n    this.pending = false;\n  }\n  AsyncAction.prototype.schedule = function (state, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n    if (this.closed) {\n      return this;\n    }\n    // Always replace the current state with the new state.\n    this.state = state;\n    // Set the pending flag indicating that this action has been scheduled, or\n    // has recursively rescheduled itself.\n    this.pending = true;\n    var id = this.id;\n    var scheduler = this.scheduler;\n    //\n    // Important implementation note:\n    //\n    // Actions only execute once by default, unless rescheduled from within the\n    // scheduled callback. This allows us to implement single and repeat\n    // actions via the same code path, without adding API surface area, as well\n    // as mimic traditional recursion but across asynchronous boundaries.\n    //\n    // However, JS runtimes and timers distinguish between intervals achieved by\n    // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n    // serial `setTimeout` calls can be individually delayed, which delays\n    // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n    // guarantee the interval callback will be invoked more precisely to the\n    // interval period, regardless of load.\n    //\n    // Therefore, we use `setInterval` to schedule single and repeat actions.\n    // If the action reschedules itself with the same delay, the interval is not\n    // canceled. If the action doesn't reschedule, or reschedules with a\n    // different delay, the interval will be canceled after scheduled callback\n    // execution.\n    //\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, delay);\n    }\n    this.delay = delay;\n    // If this action has already an async Id, don't request a new one.\n    this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n    return this;\n  };\n  AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n    return root_1.root.setInterval(scheduler.flush.bind(scheduler, this), delay);\n  };\n  AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n    // If this action is rescheduled with the same delay time, don't clear the interval id.\n    if (delay !== null && this.delay === delay && this.pending === false) {\n      return id;\n    }\n    // Otherwise, if the action's delay time is different from the current delay,\n    // or the action has been rescheduled before it's executed, clear the interval id\n    return root_1.root.clearInterval(id) && undefined || undefined;\n  };\n  /**\n   * Immediately executes this action and the `work` it contains.\n   * @return {any}\n   */\n  AsyncAction.prototype.execute = function (state, delay) {\n    if (this.closed) {\n      return new Error('executing a cancelled action');\n    }\n    this.pending = false;\n    var error = this._execute(state, delay);\n    if (error) {\n      return error;\n    } else if (this.pending === false && this.id != null) {\n      // Dequeue if the action didn't reschedule itself. Don't call\n      // unsubscribe(), because the action could reschedule later.\n      // For example:\n      // ```\n      // scheduler.schedule(function doWork(counter) {\n      //   /* ... I'm a busy worker bee ... */\n      //   var originalAction = this;\n      //   /* wait 100ms before rescheduling the action */\n      //   setTimeout(function () {\n      //     originalAction.schedule(counter + 1);\n      //   }, 100);\n      // }, 1000);\n      // ```\n      this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n    }\n  };\n  AsyncAction.prototype._execute = function (state, delay) {\n    var errored = false;\n    var errorValue = undefined;\n    try {\n      this.work(state);\n    } catch (e) {\n      errored = true;\n      errorValue = !!e && e || new Error(e);\n    }\n    if (errored) {\n      this.unsubscribe();\n      return errorValue;\n    }\n  };\n  /** @deprecated internal use only */\n  AsyncAction.prototype._unsubscribe = function () {\n    var id = this.id;\n    var scheduler = this.scheduler;\n    var actions = scheduler.actions;\n    var index = actions.indexOf(this);\n    this.work = null;\n    this.state = null;\n    this.pending = false;\n    this.scheduler = null;\n    if (index !== -1) {\n      actions.splice(index, 1);\n    }\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, null);\n    }\n    this.delay = null;\n  };\n  return AsyncAction;\n}(Action_1.Action);\nexports.AsyncAction = AsyncAction;","map":{"version":3,"mappings":"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","names":["__extends","scheduler","work","_super","AsyncAction","state","delay","closed","pending","id","recycleAsyncId","requestAsyncId","root_1","setInterval","flush","bind","clearInterval","undefined","Error","error","_execute","errored","errorValue","e","unsubscribe","actions","index","indexOf","splice","Action_1","exports"],"sources":["C:\\Projects\\health-care-chatbot\\node_modules\\src\\scheduler\\AsyncAction.ts"],"sourcesContent":["import { root } from '../util/root';\nimport { Action } from './Action';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsyncAction<T> extends Action<T> {\n\n  public id: any;\n  public state: T;\n  public delay: number;\n  protected pending: boolean = false;\n\n  constructor(protected scheduler: AsyncScheduler,\n              protected work: (this: AsyncAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n\n    if (this.closed) {\n      return this;\n     }\n\n    // Always replace the current state with the new state.\n    this.state = state;\n\n    // Set the pending flag indicating that this action has been scheduled, or\n    // has recursively rescheduled itself.\n    this.pending = true;\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n\n    //\n    // Important implementation note:\n    //\n    // Actions only execute once by default, unless rescheduled from within the\n    // scheduled callback. This allows us to implement single and repeat\n    // actions via the same code path, without adding API surface area, as well\n    // as mimic traditional recursion but across asynchronous boundaries.\n    //\n    // However, JS runtimes and timers distinguish between intervals achieved by\n    // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n    // serial `setTimeout` calls can be individually delayed, which delays\n    // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n    // guarantee the interval callback will be invoked more precisely to the\n    // interval period, regardless of load.\n    //\n    // Therefore, we use `setInterval` to schedule single and repeat actions.\n    // If the action reschedules itself with the same delay, the interval is not\n    // canceled. If the action doesn't reschedule, or reschedules with a\n    // different delay, the interval will be canceled after scheduled callback\n    // execution.\n    //\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, delay);\n    }\n\n    this.delay = delay;\n    // If this action has already an async Id, don't request a new one.\n    this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n\n    return this;\n  }\n\n  protected requestAsyncId(scheduler: AsyncScheduler, id?: any, delay: number = 0): any {\n    return root.setInterval(scheduler.flush.bind(scheduler, this), delay);\n  }\n\n  protected recycleAsyncId(scheduler: AsyncScheduler, id: any, delay: number = 0): any {\n    // If this action is rescheduled with the same delay time, don't clear the interval id.\n    if (delay !== null && this.delay === delay && this.pending === false) {\n      return id;\n    }\n    // Otherwise, if the action's delay time is different from the current delay,\n    // or the action has been rescheduled before it's executed, clear the interval id\n    return root.clearInterval(id) && undefined || undefined;\n  }\n\n  /**\n   * Immediately executes this action and the `work` it contains.\n   * @return {any}\n   */\n  public execute(state: T, delay: number): any {\n\n    if (this.closed) {\n      return new Error('executing a cancelled action');\n    }\n\n    this.pending = false;\n    const error = this._execute(state, delay);\n    if (error) {\n      return error;\n    } else if (this.pending === false && this.id != null) {\n      // Dequeue if the action didn't reschedule itself. Don't call\n      // unsubscribe(), because the action could reschedule later.\n      // For example:\n      // ```\n      // scheduler.schedule(function doWork(counter) {\n      //   /* ... I'm a busy worker bee ... */\n      //   var originalAction = this;\n      //   /* wait 100ms before rescheduling the action */\n      //   setTimeout(function () {\n      //     originalAction.schedule(counter + 1);\n      //   }, 100);\n      // }, 1000);\n      // ```\n      this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n    }\n  }\n\n  protected _execute(state: T, delay: number): any {\n    let errored: boolean = false;\n    let errorValue: any = undefined;\n    try {\n      this.work(state);\n    } catch (e) {\n      errored = true;\n      errorValue = !!e && e || new Error(e);\n    }\n    if (errored) {\n      this.unsubscribe();\n      return errorValue;\n    }\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n    const actions = scheduler.actions;\n    const index = actions.indexOf(this);\n\n    this.work  = null;\n    this.state = null;\n    this.pending = false;\n    this.scheduler = null;\n\n    if (index !== -1) {\n      actions.splice(index, 1);\n    }\n\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, null);\n    }\n\n    this.delay = null;\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}